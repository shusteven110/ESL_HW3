
##############################################################################
# Makefile generated by bdw_makegen version 21.20-p100
#      Cadence Design Systems
#      Mon May 15 08:31:29 CST 2023
#          Project file was <project.tcl>
##############################################################################

GENERATING_STRATUS_VERSION = 21.20-p100

# Check that we have Stratus on our path
ifneq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
    $(error Stratus executable was not found. Please add Stratus installation to your search path, and run 'bdw_makegen' command.)
endif

CURRENT_STRATUS_VERSION := $(shell bdw_shell -version)
CURRENT_STRATUS_VERSION := $(shell echo $(CURRENT_STRATUS_VERSION) | cut -d ' ' -f 3)

# Check that this Makefile.prj was generated by the current stratus version
ifneq ($(CURRENT_STRATUS_VERSION),$(GENERATING_STRATUS_VERSION))
    $(error The Makefile.prj was created with a different version of Stratus. Please run 'bdw_makegen' command to re-generate Makefile.prj.)                                                                          
endif

# Dependencies on tcl files source by the project file.
Makefile.prj: project.tcl

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/usr/cadtool/cadence/STRATUS/STRATUS_21.10.100/share/stratus/techlibs/GPDK045/gsclib045_svt_v4.4/gsclib045/timing/slow_vdd1v2_basicCells.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /usr/cadtool/cadence/STRATUS/STRATUS_21.10.100
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.3


# Use internal SystemC 2.3.3 for simulation
export SYSTEMC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/systemc/2.3.3


# Use builtin gcc 9.3 for simulations.
export BDW_CC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/9.3/bin/g++
export BDW_AR := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/9.3/bin/ar rc
export BDW_CCDEP := $(BDW_CC)
export BDW_LINK := $(BDW_CC)



ifeq ($(BDW_DEBUG),1)
BDW_DEBUG_DIR = /debug
else
BDW_DEBUG_DIR =
endif

ifeq ($(BDW_GENDEP),)
export BDW_GENDEPS=0
endif
export ARITH_HOME = /usr/cadtool/cadence/STRATUS/STRATUS_21.10.100/tools/cellmath
export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_VISTA = 0
export BDW_NCSC = 0
export BDW_XMSC = 1
export BDW_VLOGSIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_VLOG_DUMPFILE
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif


######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for user defined tool command scripts
######################################################################



ifeq ($(BDW_STRATUS_HLS_COMMAND),)
    BDW_STRATUS_HLS_COMMAND = stratus_hls
endif
ifeq ($(BDW_STRATUS_IDE_COMMAND),)
    BDW_STRATUS_IDE_COMMAND = stratus_ide
endif
ifeq ($(BDW_WRAPGEN_COMMAND),)
    BDW_WRAPGEN_COMMAND = bdw_wrapgen
endif
ifeq ($(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND),)
    BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_HLS_COMMAND),)
    BDW_LAUNCH_HLS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_SIM_COMMAND),)
    BDW_LAUNCH_SIM_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND),)
    BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_POWER_COMMAND),)
    BDW_LAUNCH_POWER_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_ANALYSIS_COMMAND),)
    BDW_LAUNCH_ANALYSIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_EQUIV_COMMAND),)
    BDW_LAUNCH_EQUIV_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_IDE_COMMAND),)
    BDW_LAUNCH_IDE_COMMAND = $(BDW_LAUNCH_COMMAND)
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL            = $(BDW_STRATUS_HLS_COMMAND)
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = ..
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += ../main.cpp ../Testbench.cpp ../System.cpp
endif
BDW_CCOPTIONS	   = -DCLOCK_PERIOD=10.0 -g 
BDW_COV_LIB_FLAGS = 
BDW_DEP_FILTER	   = | bdw_depfilter project.tcl

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): project.tcl
	@bdw_makegen project.tcl -q 

######################################################################
# Preparation for concurrent builds target
######################################################################


ifeq ($(CWBExec_prep),1)
prep_all all_deps: 
	$(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND) $(MAKE) update_hierarchy prep_vlog_all gen_all_deps
else
prep_all all_deps:
	bdw_exec -jobproject $(BDW_PROJECT_FILE) -job prep_all $(MAKE) CWBExec_prep=1 prep_all
endif


######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) -I$(STRATUS_HOME)/share/stratus/include --c++14 $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) --clock_period=10.000 --message_detail=3
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR) --c++14 $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_Filter_BASIC	= -DBASIC=1 -DBDW_RTL_Filter_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_BASIC)))
HL_FLAGS_Filter_DPA	= -DDPA=1 -DBDW_RTL_Filter_DPA=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_DPA)))
HL_FLAGS_Filter_FLAT_UNROLL_ALL_FAST	= -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_Filter_FLAT_UNROLL_ALL_FAST=1 --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_FLAT_UNROLL_ALL_FAST)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/Filter_wrap.h
ifeq ($(BDW_SIM_CONFIG),B)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filter.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filter.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	../Filter.cpp
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filter_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filter.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filter.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),V_BASIC)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/BASIC/Filter.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filter_BASIC 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_BASIC.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filter_cosim.v $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filter/BASIC/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filter_BASIC
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filter_BASIC
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filter_wrap.d $(BDW_WORKLIB)/modules/Filter/BASIC/Filter.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filter.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_DPA)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/DPA/Filter.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filter_DPA 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_DPA.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filter_cosim.v $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filter/DPA/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filter_DPA
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filter_DPA
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filter_wrap.d $(BDW_WORKLIB)/modules/Filter/DPA/Filter.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filter.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_FLAT_UNROLL_ALL_FAST)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filter_FLAT_UNROLL_ALL_FAST 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_FLAT_UNROLL_ALL_FAST.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filter_cosim.v $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filter_FLAT_UNROLL_ALL_FAST
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filter_FLAT_UNROLL_ALL_FAST
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filter_wrap.d $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filter.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/Filter_wrap.d
endif
endif
endif
endif
endif

################################################################
# List of all dep files outside sim_configs for make all_deps
################################################################
BDW_DEP_FILES = $(BDW_WORKLIB)/wrappers/Filter_wrap.d $(BDW_WORKLIB)/modules/Filter/BASIC/Filter.d $(BDW_WORKLIB)/modules/Filter/DPA/Filter.d $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.d


################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


        
# logicSynthConfig specific definitions


################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	
ifeq ($(BDW_DEBUG),1)
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG)
else
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
endif
else
	EXECUTABLE			= $(BDW_VLOG_SIM)

ifeq ($(BDW_DEBUG),1)
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
else
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
endif
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 

######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
            ifneq ($(SIM_DEP_FILES),)
                ifeq ($(BDW_GENDEPS),1)
                    -include $(SIM_DEP_FILES)
                endif
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################

include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all:


kill_power_all:


clean_power_all:


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all:


kill_ls_all:


clean_ls_all:


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_sim_all: hls_B hls_V_BASIC hls_V_DPA hls_V_FLAT_UNROLL_ALL_FAST


hls_all: hls_Filter_BASIC hls_Filter_DPA hls_Filter_FLAT_UNROLL_ALL_FAST


hls_Filter_all: hls_Filter_BASIC hls_Filter_DPA hls_Filter_FLAT_UNROLL_ALL_FAST


cynth_all: cynth_B cynth_V_BASIC cynth_V_DPA cynth_V_FLAT_UNROLL_ALL_FAST


kill_hls_all kill_cynth_all: kill_hls_Filter_BASIC kill_hls_Filter_DPA kill_hls_Filter_FLAT_UNROLL_ALL_FAST


gen_all_deps: 
	-@$(MAKE) $(BDW_DEP_FILES)


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : bdw_prebuild_wrappers

bdw_prebuild_wrappers:
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

bdw_prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
	@$(MAKE) $(SIM_RTL_TARGETS)
endif


clean_hls_all: clean_hls_B clean_hls_V_BASIC clean_hls_V_DPA clean_hls_V_FLAT_UNROLL_ALL_FAST

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B prebuild_V_BASIC prebuild_V_DPA prebuild_V_FLAT_UNROLL_ALL_FAST

build_all: build_B build_V_BASIC build_V_DPA build_V_FLAT_UNROLL_ALL_FAST

sim_all: sim_B sim_V_BASIC sim_V_DPA sim_V_FLAT_UNROLL_ALL_FAST

kill_sim_all: kill_sim_B kill_sim_V_BASIC kill_sim_V_DPA kill_sim_V_FLAT_UNROLL_ALL_FAST

clean_wrap_all: clean_wrap_B clean_wrap_V_BASIC clean_wrap_V_DPA clean_wrap_V_FLAT_UNROLL_ALL_FAST

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /home/m110/m110061613/EE6470/Q3/stratus/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_V_BASIC clean_V_DPA clean_V_FLAT_UNROLL_ALL_FAST clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



#########################################################
## Start of the "config groups" rule set
#########################################################
        

#########################################################
## End of the "config groups" rule set
#########################################################
        

help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 21.20-p100 from project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo "    help-configs - List all configs defined in the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    hls_sim_all         - Run stratus_hls for all modules that are RTL_V in a sim_config."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all             - Run logic synthesis for all logic synthesis configs "
	@echo "    clean_ls_all       - Removes logic synthesis results for all logic synthesis configs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for hls_libs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of date hls_module wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_hls_<config_group>_<hls_config>  - Kill all the stratus_hls jobs for a config group"
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    hhls_<module>_<hls_config>  - Run stratus_hls on the given module and its submodules and hls_config to Verilog"
	@echo "    hls_<config_group>  - Run stratus_hls on the modules in a config group specified by define_config_group command"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics for all modules that have a hls_config with the given name"
	@echo "    view_<sim_config>  - View waveforms for the simulation (waveform viewer tool is choosen from project file)"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all            - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>   - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    elab_<module>_<hls_config>  - Run stratus_hls through elaboration on the given module and hls_config"
	@echo "    optim_<module>_<hls_config> - Run stratus_hls through optimization on the given module and hls_config"
	@echo "    sched_<module>_<hls_config> - Run stratus_hls through scheduling on the given module and hls_config"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and hls_config"
	@echo "    kill_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module Filter:"
	@echo "		BASIC	DPA	FLAT_UNROLL_ALL_FAST"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds a simulation for the named sim_config for use with the gdb debugger under stratus_ide"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V_BASIC	V_DPA	V_FLAT_UNROLL_ALL_FAST"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo ""

help-configs:
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module Filter:"
	@echo "		BASIC	DPA	FLAT_UNROLL_ALL_FAST"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V_BASIC	V_DPA	V_FLAT_UNROLL_ALL_FAST"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo ""

#########################################################
# rules for making parent simConfig links
#########################################################
parentLinks:
	@if [ ! -d $(BDW_SIM_CONFIG_DIR) ] ; then mkdir -p $(BDW_SIM_CONFIG_DIR) ; fi
	@cd $(BDW_SIM_CONFIG_DIR) ; \
	ln -sf ../$(BDW_PARENT_SIM)/xcelium ; \
	if [ -d ../$(BDW_PARENT_SIM)/xcelium.d ] ; then \
		ln -sf ../$(BDW_PARENT_SIM)/xcelium.d ; \
	fi; \
	ln -sf ../$(BDW_PARENT_SIM)/siminfo



#########################################################
## Start of the rule set for sim_config B
#########################################################


hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: $(addprefix clean_, ) 

clean_cynth_B: clean_hls_B

prebuild_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B build_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B BDW_GENDEPS=1

else
.PHONY: build_B
.PHONY: dbg_build_B

dbg_build_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.B $(MAKE) CWBExec_build=1 dbg_build_B

build_B:
	@bdw_exec -jobproject project.tcl -job build.B $(MAKE) CWBExec_build=1 build_B

build_B_sub:
	@bdw_exec -jobproject project.tcl -job build.B.s $(MAKE) CWBExec_build=1 build_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_B sim_sub_B: build_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=B 

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject project.tcl -job sim.B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_B 

sim_sub_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_B 
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=B RUN_DEBUGGER=1
    

view_B:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B

clean_B: clean_hls_B clean_sim_B

clean_sim_B: clean_wrap_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B


#########################################################
## Start of the rule set for sim_config V_BASIC
#########################################################


hls_V_BASIC:  
	$(MAKE) -j1 hls_Filter_BASIC



cynth_V_BASIC:  
	$(MAKE) -j1 hlsc_Filter_BASIC

hls_clean_V_BASIC: clean_hls_V_BASIC

cynth_clean_V_BASIC: hls_clean_V_BASIC

clean_hls_V_BASIC: $(addprefix clean_, hls_Filter_BASIC) 

clean_cynth_V_BASIC: clean_hls_V_BASIC

prebuild_V_BASIC: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filter_BASIC

ifeq ($(CWBExec_build),1)

dbg_build_V_BASIC:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_BASIC
	@$(MAKE) BDW_DEBUG=1 build_V_BASIC


build_V_BASIC build_V_BASIC_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filter_BASIC
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_BASIC
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_BASIC BDW_GENDEPS=1

else
.PHONY: build_V_BASIC
.PHONY: dbg_build_V_BASIC

dbg_build_V_BASIC:
	@bdw_exec -jobproject project.tcl -job dbg_build.V_BASIC $(MAKE) CWBExec_build=1 dbg_build_V_BASIC

build_V_BASIC:
	@bdw_exec -jobproject project.tcl -job build.V_BASIC $(MAKE) CWBExec_build=1 build_V_BASIC

build_V_BASIC_sub:
	@bdw_exec -jobproject project.tcl -job build.V_BASIC.s $(MAKE) CWBExec_build=1 build_V_BASIC_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_BASIC sim_sub_V_BASIC: build_V_BASIC_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_BASIC 

else
.PHONY: sim_V_BASIC

sim_V_BASIC:
	@bdw_exec -jobproject project.tcl -job sim.V_BASIC $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_BASIC 

sim_sub_V_BASIC:
	@bdw_exec -jobproject project.tcl -job sim_sub.V_BASIC.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_BASIC 
endif


kill_sim_V_BASIC:
	@bdw_kill -job sim.V_BASIC
	@bdw_kill -job sim.V_BASIC.s


catlog_V_BASIC: catVLGLog_Filter_BASIC
debug_V_BASIC: 
	@$(MAKE) BDW_DEBUG=1 build_V_BASIC
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_BASIC RUN_DEBUGGER=1
    

view_V_BASIC:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_BASIC $(BDW_WORKLIB)/sims/V_BASIC/sim_V_BASIC.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_BASIC

clean_V_BASIC: clean_hls_V_BASIC clean_sim_V_BASIC

clean_sim_V_BASIC: clean_wrap_V_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_BASIC.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_BASIC


$(BDW_WORKLIB)/sims/top_V_BASIC.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig V_BASIC -top top



#########################################################
## Start of the rule set for sim_config V_DPA
#########################################################


hls_V_DPA:  
	$(MAKE) -j1 hls_Filter_DPA



cynth_V_DPA:  
	$(MAKE) -j1 hlsc_Filter_DPA

hls_clean_V_DPA: clean_hls_V_DPA

cynth_clean_V_DPA: hls_clean_V_DPA

clean_hls_V_DPA: $(addprefix clean_, hls_Filter_DPA) 

clean_cynth_V_DPA: clean_hls_V_DPA

prebuild_V_DPA: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filter_DPA

ifeq ($(CWBExec_build),1)

dbg_build_V_DPA:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_DPA
	@$(MAKE) BDW_DEBUG=1 build_V_DPA


build_V_DPA build_V_DPA_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filter_DPA
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_DPA
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_DPA BDW_GENDEPS=1

else
.PHONY: build_V_DPA
.PHONY: dbg_build_V_DPA

dbg_build_V_DPA:
	@bdw_exec -jobproject project.tcl -job dbg_build.V_DPA $(MAKE) CWBExec_build=1 dbg_build_V_DPA

build_V_DPA:
	@bdw_exec -jobproject project.tcl -job build.V_DPA $(MAKE) CWBExec_build=1 build_V_DPA

build_V_DPA_sub:
	@bdw_exec -jobproject project.tcl -job build.V_DPA.s $(MAKE) CWBExec_build=1 build_V_DPA_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_DPA sim_sub_V_DPA: build_V_DPA_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_DPA 

else
.PHONY: sim_V_DPA

sim_V_DPA:
	@bdw_exec -jobproject project.tcl -job sim.V_DPA $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_DPA 

sim_sub_V_DPA:
	@bdw_exec -jobproject project.tcl -job sim_sub.V_DPA.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_DPA 
endif


kill_sim_V_DPA:
	@bdw_kill -job sim.V_DPA
	@bdw_kill -job sim.V_DPA.s


catlog_V_DPA: catVLGLog_Filter_DPA
debug_V_DPA: 
	@$(MAKE) BDW_DEBUG=1 build_V_DPA
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_DPA RUN_DEBUGGER=1
    

view_V_DPA:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_DPA:
	@rm -f $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_DPA $(BDW_WORKLIB)/sims/V_DPA/sim_V_DPA.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_DPA

clean_V_DPA: clean_hls_V_DPA clean_sim_V_DPA

clean_sim_V_DPA: clean_wrap_V_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_DPA.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_DPA


$(BDW_WORKLIB)/sims/top_V_DPA.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig V_DPA -top top



#########################################################
## Start of the rule set for sim_config V_FLAT_UNROLL_ALL_FAST
#########################################################


hls_V_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hls_Filter_FLAT_UNROLL_ALL_FAST



cynth_V_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hlsc_Filter_FLAT_UNROLL_ALL_FAST

hls_clean_V_FLAT_UNROLL_ALL_FAST: clean_hls_V_FLAT_UNROLL_ALL_FAST

cynth_clean_V_FLAT_UNROLL_ALL_FAST: hls_clean_V_FLAT_UNROLL_ALL_FAST

clean_hls_V_FLAT_UNROLL_ALL_FAST: $(addprefix clean_, hls_Filter_FLAT_UNROLL_ALL_FAST) 

clean_cynth_V_FLAT_UNROLL_ALL_FAST: clean_hls_V_FLAT_UNROLL_ALL_FAST

prebuild_V_FLAT_UNROLL_ALL_FAST: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filter_FLAT_UNROLL_ALL_FAST

ifeq ($(CWBExec_build),1)

dbg_build_V_FLAT_UNROLL_ALL_FAST:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST
	@$(MAKE) BDW_DEBUG=1 build_V_FLAT_UNROLL_ALL_FAST


build_V_FLAT_UNROLL_ALL_FAST build_V_FLAT_UNROLL_ALL_FAST_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filter_FLAT_UNROLL_ALL_FAST
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST BDW_GENDEPS=1

else
.PHONY: build_V_FLAT_UNROLL_ALL_FAST
.PHONY: dbg_build_V_FLAT_UNROLL_ALL_FAST

dbg_build_V_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job dbg_build.V_FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_build=1 dbg_build_V_FLAT_UNROLL_ALL_FAST

build_V_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job build.V_FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_build=1 build_V_FLAT_UNROLL_ALL_FAST

build_V_FLAT_UNROLL_ALL_FAST_sub:
	@bdw_exec -jobproject project.tcl -job build.V_FLAT_UNROLL_ALL_FAST.s $(MAKE) CWBExec_build=1 build_V_FLAT_UNROLL_ALL_FAST_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_FLAT_UNROLL_ALL_FAST sim_sub_V_FLAT_UNROLL_ALL_FAST: build_V_FLAT_UNROLL_ALL_FAST_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST 

else
.PHONY: sim_V_FLAT_UNROLL_ALL_FAST

sim_V_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job sim.V_FLAT_UNROLL_ALL_FAST $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_FLAT_UNROLL_ALL_FAST 

sim_sub_V_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job sim_sub.V_FLAT_UNROLL_ALL_FAST.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_FLAT_UNROLL_ALL_FAST 
endif


kill_sim_V_FLAT_UNROLL_ALL_FAST:
	@bdw_kill -job sim.V_FLAT_UNROLL_ALL_FAST
	@bdw_kill -job sim.V_FLAT_UNROLL_ALL_FAST.s


catlog_V_FLAT_UNROLL_ALL_FAST: catVLGLog_Filter_FLAT_UNROLL_ALL_FAST
debug_V_FLAT_UNROLL_ALL_FAST: 
	@$(MAKE) BDW_DEBUG=1 build_V_FLAT_UNROLL_ALL_FAST
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST RUN_DEBUGGER=1
    

view_V_FLAT_UNROLL_ALL_FAST:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_FLAT_UNROLL_ALL_FAST:
	@rm -f $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_FLAT_UNROLL_ALL_FAST $(BDW_WORKLIB)/sims/V_FLAT_UNROLL_ALL_FAST/sim_V_FLAT_UNROLL_ALL_FAST.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_FLAT_UNROLL_ALL_FAST

clean_V_FLAT_UNROLL_ALL_FAST: clean_hls_V_FLAT_UNROLL_ALL_FAST clean_sim_V_FLAT_UNROLL_ALL_FAST

clean_sim_V_FLAT_UNROLL_ALL_FAST: clean_wrap_V_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_FLAT_UNROLL_ALL_FAST.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_FLAT_UNROLL_ALL_FAST


$(BDW_WORKLIB)/sims/top_V_FLAT_UNROLL_ALL_FAST.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig V_FLAT_UNROLL_ALL_FAST -top top


#############################################################################
# libesc building rules
#############################################################################

ifeq ($(BDW_DEBUG),1)
libesc_WORKDIR = $(BDW_WORKLIB)/libesc/debug
else
libesc_WORKDIR = $(BDW_WORKLIB)/libesc
endif

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} "-TP ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} -TP ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



########################################################################
# Rules to prep all libraries
#######################################################################
prep_c_all: $(BDW_C_LIBPREP)

prep_vlog_all: $(BDW_VLOG_LIBPREP)


##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "Filter"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/Filter.d :  ../Filter.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../Filter.cpp \
	| sed 's|Filter\.o[ :]*|$(BDW_OBJDIR)/Filter.o $(BDW_OBJDIR)/Filter.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/Filter_trace.h : $(BDW_WORKLIB)/wrappers/Filter_trace.h.updated

$(BDW_WORKLIB)/wrappers/Filter_trace.h.updated :  ../Filter.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filter  
	@touch $(BDW_WORKLIB)/wrappers/Filter_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filter.o:  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filter.o:  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

.INTERMEDIATE : Filter_wrap.h

Filter_wrap.h : $(BDW_WORKLIB)/wrappers/Filter_wrap.h

$(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_cosim.v   : $(BDW_WRAPDIR)/Filter.updated

$(BDW_WRAPDIR)/Filter.updated :  ../Filter.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module Filter "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/Filter.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filter  
	@touch $(BDW_WORKLIB)/wrappers/Filter_trace.h.updated
$(BDW_WORKLIB)/wrappers/Filter_wrap.d :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../Filter.cpp \
		| sed 's|Filter\.o[ :]*|$(BDW_WRAPDIR)/Filter.updated $(BDW_WORKLIB)/wrappers/Filter_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/Filter_wrap.d 




##############################################################
## HLS Module "Filter" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_Filter_BASIC = 
LIB_INCLUDES_Filter_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filter_BASIC = 
LIB_NAMES_FOR_VLOG_Filter_BASIC = 
PREFIXED_LIB_NAMES_Filter_BASIC = 
EXTRACT_LIB_DASHI_Filter_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl Filter BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filter_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/BASIC/c_parts -DBASIC=1 -DBDW_RTL_Filter_BASIC=1  $(LIB_INCLUDES_Filter_BASIC)
CCFLAGS_COSIM_Filter_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/BASIC/c_parts -DBASIC=1 -DBDW_RTL_Filter_BASIC=1  $(LIB_INCLUDES_Filter_BASIC)
CCFLAGS_BEH_Filter_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/BASIC/c_parts -DBASIC=1  $(LIB_INCLUDES_Filter_BASIC)
CCFLAGS_Filter_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filter_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filter_BASIC += ${BDW_CCFLAGS_TAIL}

hls_Filter_BASIC : hlsc_Filter_BASIC

cynth_Filter_BASIC : hlsc_Filter_BASIC 

elab_Filter_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr

optim_Filter_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr

sched_Filter_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr

.PHONY: hlsc_Filter_BASIC hls_Filter_BASIC

hlsc_Filter_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=Filter BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.Filter.BASIC $(MAKE) CWBExec_hls=1 hlsc_Filter_BASIC
endif

clean_cynth_Filter_BASIC: clean_hls_Filter_BASIC

clean_Filter_BASIC: clean_hls_Filter_BASIC

clean_hls_Filter_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/Filter/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.BASIC.s

kill_hls_Filter_BASIC:
	@bdw_kill -job hls.Filter.BASIC
	@bdw_kill -job hls.Filter.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filter/BASIC/Filter.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filter_BASIC :
	bdw_htmlgen -project project.tcl -module Filter -cynthconfig BASIC





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filter/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/Filter/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp BDW_MODULE=Filter BDW_CYNTH_CONFIG=BASIC BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/BASIC BDW_HLS_CONFIG=BASIC BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filter_BASIC) \
		-d $(BDW_WORKLIB)/modules/Filter/BASIC -o Filter_rtl.cpp \
		--hls_module=Filter --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filter_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filter_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filter_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filter_BASIC) \
		 ../Filter.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.Filter.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h : $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h.updated

$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h.updated : $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filter -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h.updated

catHLLog_Filter_BASIC:
	cat $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filter_BASIC : hls_Filter_BASIC 


.PHONY: hls_Filter_BASIC

hls_Filter_BASIC hlsv_Filter_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filter_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filter_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.Filter.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_Filter_BASIC
endif

catVLGLog_Filter_BASIC : catHLLog_Filter_BASIC
	cat $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_vlg.log

#
#	view rule
#

view_Filter_BASIC:
	@echo "ERROR: Schematic viewing target 'view_Filter_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_Filter_BASIC) $(EXTRACT_LIB_DASHI_Filter_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_Filter_BASIC) $(EXTRACT_LIB_DASHI_Filter_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_BEH_Filter_BASIC) -o $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_BEH_Filter_BASIC) -o $(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filter/BASIC/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_COSIM_Filter_BASIC) -o $(BDW_WORKLIB)/modules/Filter/BASIC/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_Filter_BASIC) $(EXTRACT_LIB_DASHI_Filter_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_COSIM_Filter_BASIC) -o $(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp


$(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/BASIC -I./ $(CCFLAGS_Filter_BASIC) $(EXTRACT_LIB_DASHI_Filter_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filter/BASIC/Filter.d :  ../Filter.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filter_BASIC)  ../Filter.cpp \
	| sed 's|Filter\.o[ :]*|$(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/BASIC/debug/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/BASIC/Filter.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filter/BASIC"
##############################################################

Filter_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/Filter/BASIC
Filter_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filter_BASIC
Filter_BASIC_LIBNAME = Filter_BASIC
Filter_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/Filter/BASIC
Filter_BASIC_C_PARTS_A = $(Filter_BASIC_WORKLIB)/objs/libFilter_BASIC.a

prep_c_Filter_BASIC : $(Filter_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_BASIC_WORKLIB) prep_c

prep_vlog_Filter_BASIC : $(Filter_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_BASIC_WORKLIB) prep_vlog

prep_Filter_BASIC : $(Filter_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_BASIC_WORKLIB) prep

$(Filter_BASIC_WORKLIB)/Makefile : $(Filter_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filter_BASIC_WORKLIB) ]; then mkdir -p $(Filter_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(Filter_BASIC_SRCDIR) -o $(Filter_BASIC_WORKLIB)/Makefile -module Filter -cynthconfig BASIC   

$(Filter_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filter_BASIC_WORKLIB) ]; then mkdir -p $(Filter_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filter_BASIC_WORKLIB)/Filter_BASIC.d :
	@if [ ! -d $(Filter_BASIC_WORKLIB) ]; then mkdir -p $(Filter_BASIC_WORKLIB); fi
	@touch $(Filter_BASIC_WORKLIB)/Filter_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_Filter_DPA = 
LIB_INCLUDES_Filter_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filter_DPA = 
LIB_NAMES_FOR_VLOG_Filter_DPA = 
PREFIXED_LIB_NAMES_Filter_DPA = 
EXTRACT_LIB_DASHI_Filter_DPA = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl Filter DPA]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filter_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/DPA/c_parts -DDPA=1 -DBDW_RTL_Filter_DPA=1  $(LIB_INCLUDES_Filter_DPA)
CCFLAGS_COSIM_Filter_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/DPA/c_parts -DDPA=1 -DBDW_RTL_Filter_DPA=1  $(LIB_INCLUDES_Filter_DPA)
CCFLAGS_BEH_Filter_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/DPA/c_parts -DDPA=1  $(LIB_INCLUDES_Filter_DPA)
CCFLAGS_Filter_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filter_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filter_DPA += ${BDW_CCFLAGS_TAIL}

hls_Filter_DPA : hlsc_Filter_DPA

cynth_Filter_DPA : hlsc_Filter_DPA 

elab_Filter_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr

optim_Filter_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr

sched_Filter_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr

.PHONY: hlsc_Filter_DPA hls_Filter_DPA

hlsc_Filter_DPA : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=Filter BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.Filter.DPA $(MAKE) CWBExec_hls=1 hlsc_Filter_DPA
endif

clean_cynth_Filter_DPA: clean_hls_Filter_DPA

clean_Filter_DPA: clean_hls_Filter_DPA

clean_hls_Filter_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/Filter/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.DPA.s

kill_hls_Filter_DPA:
	@bdw_kill -job hls.Filter.DPA
	@bdw_kill -job hls.Filter.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filter/DPA/Filter.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filter_DPA :
	bdw_htmlgen -project project.tcl -module Filter -cynthconfig DPA





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filter/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/Filter/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp BDW_MODULE=Filter BDW_CYNTH_CONFIG=DPA BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/DPA BDW_HLS_CONFIG=DPA BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/DPA \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filter_DPA) \
		-d $(BDW_WORKLIB)/modules/Filter/DPA -o Filter_rtl.cpp \
		--hls_module=Filter --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filter_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filter_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filter_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filter_DPA) \
		 ../Filter.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.Filter.DPA.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h : $(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h.updated

$(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h.updated : $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filter -cynthconfig DPA  
	@touch $(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h.updated

catHLLog_Filter_DPA:
	cat $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filter_DPA : hls_Filter_DPA 


.PHONY: hls_Filter_DPA

hls_Filter_DPA hlsv_Filter_DPA: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filter_DPA)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filter_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.Filter.DPA $(MAKE) CWBExec_hlsv=1 hlsv_Filter_DPA
endif

catVLGLog_Filter_DPA : catHLLog_Filter_DPA
	cat $(BDW_WORKLIB)/modules/Filter/DPA/stratus_vlg.log

#
#	view rule
#

view_Filter_DPA:
	@echo "ERROR: Schematic viewing target 'view_Filter_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_Filter_DPA) $(EXTRACT_LIB_DASHI_Filter_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/DPA/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_Filter_DPA) $(EXTRACT_LIB_DASHI_Filter_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filter/DPA/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_BEH_Filter_DPA) -o $(BDW_WORKLIB)/modules/Filter/DPA/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_BEH_Filter_DPA) -o $(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filter/DPA/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_COSIM_Filter_DPA) -o $(BDW_WORKLIB)/modules/Filter/DPA/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/DPA/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_Filter_DPA) $(EXTRACT_LIB_DASHI_Filter_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/DPA/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_COSIM_Filter_DPA) -o $(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp


$(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/DPA -I./ $(CCFLAGS_Filter_DPA) $(EXTRACT_LIB_DASHI_Filter_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filter/DPA/Filter.d :  ../Filter.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filter_DPA)  ../Filter.cpp \
	| sed 's|Filter\.o[ :]*|$(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/DPA/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/DPA/debug/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/DPA/Filter.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filter/DPA"
##############################################################

Filter_DPA_SRCDIR = $(BDW_WORKLIB)/modules/Filter/DPA
Filter_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filter_DPA
Filter_DPA_LIBNAME = Filter_DPA
Filter_DPA_WORKLIB = $(BDW_WORKLIB)/modules/Filter/DPA
Filter_DPA_C_PARTS_A = $(Filter_DPA_WORKLIB)/objs/libFilter_DPA.a

prep_c_Filter_DPA : $(Filter_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_DPA_WORKLIB) prep_c

prep_vlog_Filter_DPA : $(Filter_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_DPA_WORKLIB) prep_vlog

prep_Filter_DPA : $(Filter_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_DPA_WORKLIB) prep

$(Filter_DPA_WORKLIB)/Makefile : $(Filter_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filter_DPA_WORKLIB) ]; then mkdir -p $(Filter_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(Filter_DPA_SRCDIR) -o $(Filter_DPA_WORKLIB)/Makefile -module Filter -cynthconfig DPA   

$(Filter_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filter_DPA_WORKLIB) ]; then mkdir -p $(Filter_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filter_DPA_WORKLIB)/Filter_DPA.d :
	@if [ ! -d $(Filter_DPA_WORKLIB) ]; then mkdir -p $(Filter_DPA_WORKLIB); fi
	@touch $(Filter_DPA_WORKLIB)/Filter_DPA.d



#
# HLS config FLAT_UNROLL_ALL_FAST
#

#
#	stratus_hls rule
#
LIB_DIRS_Filter_FLAT_UNROLL_ALL_FAST = 
LIB_INCLUDES_Filter_FLAT_UNROLL_ALL_FAST = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filter_FLAT_UNROLL_ALL_FAST))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filter_FLAT_UNROLL_ALL_FAST = 
LIB_NAMES_FOR_VLOG_Filter_FLAT_UNROLL_ALL_FAST = 
PREFIXED_LIB_NAMES_Filter_FLAT_UNROLL_ALL_FAST = 
EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl Filter FLAT_UNROLL_ALL_FAST]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_Filter_FLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_Filter_FLAT_UNROLL_ALL_FAST)
CCFLAGS_COSIM_Filter_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_Filter_FLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_Filter_FLAT_UNROLL_ALL_FAST)
CCFLAGS_BEH_Filter_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_Filter_FLAT_UNROLL_ALL_FAST)
CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filter_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filter_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}

hls_Filter_FLAT_UNROLL_ALL_FAST : hlsc_Filter_FLAT_UNROLL_ALL_FAST

cynth_Filter_FLAT_UNROLL_ALL_FAST : hlsc_Filter_FLAT_UNROLL_ALL_FAST 

elab_Filter_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

optim_Filter_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

sched_Filter_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

.PHONY: hlsc_Filter_FLAT_UNROLL_ALL_FAST hls_Filter_FLAT_UNROLL_ALL_FAST

hlsc_Filter_FLAT_UNROLL_ALL_FAST : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST BDW_MODULE=Filter BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST
else
	@bdw_exec -jobproject project.tcl -job hls.Filter.FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_hls=1 hlsc_Filter_FLAT_UNROLL_ALL_FAST
endif

clean_cynth_Filter_FLAT_UNROLL_ALL_FAST: clean_hls_Filter_FLAT_UNROLL_ALL_FAST

clean_Filter_FLAT_UNROLL_ALL_FAST: clean_hls_Filter_FLAT_UNROLL_ALL_FAST

clean_hls_Filter_FLAT_UNROLL_ALL_FAST:
	@rm -rf $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filter.FLAT_UNROLL_ALL_FAST.s

kill_hls_Filter_FLAT_UNROLL_ALL_FAST:
	@bdw_kill -job hls.Filter.FLAT_UNROLL_ALL_FAST
	@bdw_kill -job hls.Filter.FLAT_UNROLL_ALL_FAST.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),FLAT_UNROLL_ALL_FAST)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filter_FLAT_UNROLL_ALL_FAST :
	bdw_htmlgen -project project.tcl -module Filter -cynthconfig FLAT_UNROLL_ALL_FAST





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST ]; then mkdir -p $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp BDW_MODULE=Filter BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filter_FLAT_UNROLL_ALL_FAST) \
		-d $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -o Filter_rtl.cpp \
		--hls_module=Filter --hls_config=FLAT_UNROLL_ALL_FAST --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filter_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filter_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filter_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST) \
		 ../Filter.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr :  ../Filter.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.Filter.FLAT_UNROLL_ALL_FAST.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.v $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h : $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h.updated

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h.updated : $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filter -cynthconfig FLAT_UNROLL_ALL_FAST  
	@touch $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h.updated

catHLLog_Filter_FLAT_UNROLL_ALL_FAST:
	cat $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filter_FLAT_UNROLL_ALL_FAST : hls_Filter_FLAT_UNROLL_ALL_FAST 


.PHONY: hls_Filter_FLAT_UNROLL_ALL_FAST

hls_Filter_FLAT_UNROLL_ALL_FAST hlsv_Filter_FLAT_UNROLL_ALL_FAST: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filter_FLAT_UNROLL_ALL_FAST)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filter_FLAT_UNROLL_ALL_FAST BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST
else
	@bdw_exec -jobproject project.tcl -job hlsv.Filter.FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_hlsv=1 hlsv_Filter_FLAT_UNROLL_ALL_FAST
endif

catVLGLog_Filter_FLAT_UNROLL_ALL_FAST : catHLLog_Filter_FLAT_UNROLL_ALL_FAST
	cat $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_vlg.log

#
#	view rule
#

view_Filter_FLAT_UNROLL_ALL_FAST:
	@echo "ERROR: Schematic viewing target 'view_Filter_FLAT_UNROLL_ALL_FAST' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_rtl.o : $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl Filter`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_rtl.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_BEH_Filter_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_beh.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_BEH_Filter_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_beh.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_COSIM_Filter_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.h $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_COSIM_Filter_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp


$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_hoist.o :  ../Filter.cpp $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp $(BDW_WORKLIB)/wrappers/Filter_cosim.h $(BDW_WORKLIB)/wrappers/Filter_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_Filter_FLAT_UNROLL_ALL_FAST) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_hoist.o  $(BDW_WORKLIB)/wrappers/Filter_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.d :  ../Filter.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config FLAT_UNROLL_ALL_FAST of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filter_FLAT_UNROLL_ALL_FAST)  ../Filter.cpp \
	| sed 's|Filter\.o[ :]*|$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/debug/Filter_beh.o $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST"
##############################################################

Filter_FLAT_UNROLL_ALL_FAST_SRCDIR = $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST
Filter_FLAT_UNROLL_ALL_FAST_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filter_FLAT_UNROLL_ALL_FAST
Filter_FLAT_UNROLL_ALL_FAST_LIBNAME = Filter_FLAT_UNROLL_ALL_FAST
Filter_FLAT_UNROLL_ALL_FAST_WORKLIB = $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST
Filter_FLAT_UNROLL_ALL_FAST_C_PARTS_A = $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/objs/libFilter_FLAT_UNROLL_ALL_FAST.a

prep_c_Filter_FLAT_UNROLL_ALL_FAST : $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) prep_c

prep_vlog_Filter_FLAT_UNROLL_ALL_FAST : $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) prep_vlog

prep_Filter_FLAT_UNROLL_ALL_FAST : $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) prep

$(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile : $(Filter_FLAT_UNROLL_ALL_FAST_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(Filter_FLAT_UNROLL_ALL_FAST_SRCDIR) -o $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile -module Filter -cynthconfig FLAT_UNROLL_ALL_FAST   

$(Filter_FLAT_UNROLL_ALL_FAST_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Filter_FLAT_UNROLL_ALL_FAST.d :
	@if [ ! -d $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	@touch $(Filter_FLAT_UNROLL_ALL_FAST_WORKLIB)/Filter_FLAT_UNROLL_ALL_FAST.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_DPA:  cynth_Filter_DPA
hlsc_DPA:  
	$(MAKE) -j1 hlsc_Filter_DPA

cynthvlg_DPA: hls_DPA
hls_DPA:  
	$(MAKE) -j1 hls_Filter_DPA

cynthvlg_DPA: elab_DPA
elab_DPA:  
	$(MAKE) -j1 elab_Filter_DPA

cynthvlg_DPA: optim_DPA
optim_DPA:  
	$(MAKE) -j1 optim_Filter_DPA

cynthvlg_DPA: sched_DPA
sched_DPA:  
	$(MAKE) -j1 sched_Filter_DPA

view_DPA:
	@echo "ERROR: Schematic viewing target 'view_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPA:
	@rm -f $(BDW_WORKLIB)/modules/Filter/DPA/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/DPA/stratus_hls.bdr


cynth_BASIC:  cynth_Filter_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_Filter_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_Filter_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_Filter_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_Filter_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_Filter_BASIC

view_BASIC:
	@echo "ERROR: Schematic viewing target 'view_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/Filter/BASIC/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/BASIC/stratus_hls.bdr


cynth_FLAT_UNROLL_ALL_FAST:  cynth_Filter_FLAT_UNROLL_ALL_FAST
hlsc_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hlsc_Filter_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: hls_FLAT_UNROLL_ALL_FAST
hls_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hls_Filter_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: elab_FLAT_UNROLL_ALL_FAST
elab_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 elab_Filter_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: optim_FLAT_UNROLL_ALL_FAST
optim_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 optim_Filter_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: sched_FLAT_UNROLL_ALL_FAST
sched_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 sched_Filter_FLAT_UNROLL_ALL_FAST

view_FLAT_UNROLL_ALL_FAST:
	@echo "ERROR: Schematic viewing target 'view_FLAT_UNROLL_ALL_FAST' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_FLAT_UNROLL_ALL_FAST:
	@rm -f $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/Filter_rtl.cpp $(BDW_WORKLIB)/modules/Filter/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    


.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	$(BDW_SIM_ENV_SETUP) make saySimPassed
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    endif
else
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so
    endif
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(SIM_RTL_TARGETS) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(SIM_BUILD)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: bdw_prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf $(SIM_OBJS) $(DEP_FILES) $(dir $(BDW_LIBREF))

bdw_sim_build: $(SIM_BUILD)
build_sim_image: bdw_prebuild_wrappers bdw_prebuild_rtl
	@$(MAKE) -j 4 bdw_sim_build

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(SIM_BUILD)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(SIM_BUILD) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)" +BDW_VLOG_PLUSARGS+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl -gen_ncsim_cmd project.tcl $(BDW_SIM_CONFIG)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGCOMP_ARGS) \
	$(BDW_XRUN_ELAB) \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(BDW_XRUN_FLAGS) \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_XRUN_ELAB) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
ifneq ($(BDW_XRUN_ELAB),-elaborate)
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifeq ($(BDW_DEBUG),1)
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so
else
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so
endif

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE)  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SHARED_LIB)

else
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_SHARED_LIB) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Rule to build verilator trace and coverage support  module
##############################################################

$(BDW_WORKLIB)/objs/esc_catrace.o: $(STRATUS_HOME)/share/stratus/source/esc_catrace.cc
	$(BDW_CC)  -o $@ $(BDW_CCFLAGS) $(BDW_VERILATOR_CCFLAGS)  $<



##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide:
	$(BDW_LAUNCH_IDE_COMMAND) $(BDW_STRATUS_IDE_COMMAND) project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_Filter_BASIC html_Filter_DPA html_Filter_FLAT_UNROLL_ALL_FAST html_summary

html_summary: project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################

