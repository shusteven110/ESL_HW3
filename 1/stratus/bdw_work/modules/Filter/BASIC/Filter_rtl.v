// Generated by stratus_hls 21.20-p100  (96289.240513)
// Mon May 15 07:59:22 2023
// from ../Filter.cpp

`timescale 1ps / 1ps


module Filter( i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data );

    input i_clk;
    input i_rst;
    input i_rgb_vld;
    input [24:0] i_rgb_data;
    input o_result_busy;
    output i_rgb_busy;
    output o_result_vld;
    output [23:0] o_result_data;
    reg [23:0] o_result_data;
    reg o_result_m_req_m_prev_trig_req;
    reg o_result_m_unacked_req;
    wire Filter_Xor_1Ux1U_1U_1_1_out1;
    wire Filter_Or_1Ux1U_1U_4_2_out1;
    reg Filter_N_Muxb_1_2_2_4_4_out1;
    reg i_rgb_m_unvalidated_req;
    wire Filter_gen_busy_r_4_196_gnew_req;
    wire Filter_gen_busy_r_4_196_gdiv;
    wire Filter_gen_busy_r_4_196_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next;
    reg[5:0] global_state_next;
    /*signed*/wire[31:0] Filter_Sub_32Ux8U_32S_1_190_out1;
    wire Filter_LessThan_4Ux4U_1U_4_188_out1;
    wire[8:0] Filter_N_Mux_9_2_1_4_187_in2;
    wire Filter_Equal_4Ux3U_1U_4_185_out1;
    reg[3:0] Filter_Equal_4Ux3U_1U_4_182_in2;
    reg gs_ctrl_do_filter_h200000000000;
    wire Filter_LessThan_8Ux8U_1U_4_158_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_156_out1;
    wire Filter_LessThan_8Ux8U_1U_4_154_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_152_out1;
    wire Filter_LessThan_8Ux8U_1U_4_151_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_149_out1;
    wire Filter_LessThan_8Ux8U_1U_4_148_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_146_out1;
    wire Filter_LessThan_8Ux8U_1U_4_144_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_141_out1;
    wire Filter_LessThan_8Ux8U_1U_4_140_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_139_out1;
    wire Filter_LessThan_8Ux8U_1U_4_138_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_137_out1;
    wire Filter_LessThan_8Ux8U_1U_4_136_out1;
    wire Filter_LessThan_8Ux8U_1U_4_131_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_130_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_129_out1;
    wire Filter_LessThan_8Ux8U_1U_4_128_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_126_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_125_out1;
    wire Filter_LessThan_8Ux8U_1U_4_123_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_121_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_120_out1;
    wire Filter_LessThan_8Ux8U_1U_4_119_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_118_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_117_out1;
    wire Filter_LessThan_8Ux8U_1U_4_115_out1;
    wire Filter_LessThan_8Ux8U_1U_4_114_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_112_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_111_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_110_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_109_out1;
    wire Filter_LessThan_8Ux8U_1U_4_107_out1;
    wire Filter_LessThan_8Ux8U_1U_4_106_out1;
    wire Filter_LessThan_8Ux8U_1U_4_105_out1;
    wire Filter_LessThan_8Ux8U_1U_4_104_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_103_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_102_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_101_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_100_out1;
    wire Filter_LessThan_8Ux8U_1U_4_99_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_98_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_97_out1;
    wire Filter_LessThan_8Ux8U_1U_4_96_out1;
    wire Filter_LessThan_8Ux8U_1U_4_95_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_94_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_93_out1;
    wire Filter_LessThan_8Ux8U_1U_4_92_out1;
    wire Filter_LessThan_8Ux8U_1U_4_87_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_86_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_85_out1;
    wire Filter_LessThan_8Ux8U_1U_4_84_out1;
    wire Filter_LessThan_8Ux8U_1U_4_83_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_82_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_81_out1;
    wire Filter_LessThan_8Ux8U_1U_4_80_out1;
    wire Filter_LessThan_8Ux8U_1U_4_74_out1;
    wire Filter_LessThan_8Ux8U_1U_4_69_out1;
    reg gs_ctrl_do_filter_h1000000;
    reg[1:0] gs_ctrl_do_filter_h820001000000;
    reg gs_ctrl_do_filter_h20000000000;
    reg gs_ctrl_do_filter_h7e0000;
    reg[1:0] gs_ctrl_do_filter_h7e00800;
    reg gs_ctrl_do_filter_h20000;
    reg[4:0] Filter_Add_5Ux5U_5U_4_25_in1;
    reg[3:0] gs_ctrl_do_filter_h87febffdfb00;
    reg[1:0] gs_ctrl_do_filter_h1ff00000540;
    wire Filter_NotEQ_2Ux2U_1U_4_28_out1;
    wire Filter_Equal_4Ux3U_1U_4_182_out1;
    reg[2:0] gs_ctrl_do_filter_h27ffffbf0540;
    reg[7:0] Filter_N_Mux_8_2_0_4_143_out1;
    reg[3:0] gs_ctrl_do_filter_h1ff00000100;
    wire Filter_NotEQ_4Ux3U_1U_4_183_out1;
    reg[3:0] gs_ctrl_do_filter_h27ffffbf0500;
    wire[4:0] Filter_Add_5Ux5U_5U_4_20_out1;
    wire Filter_Equal_2Ux2U_1U_4_18_out1;
    wire[4:0] Filter_Add_5Ux5U_5U_4_16_out1;
    reg[1:0] Filter_Mul_4Ux2U_5U_4_24_in1;
    reg[2:0] gs_ctrl_do_filter_ha7fffffffb80;
    reg[3:0] Filter_Mul_4Ux2U_5U_4_24_in2;
    reg gs_ctrl_do_filter_h7e0080;
    wire[2:0] Filter_Add_3Ux2U_4U_4_12_in2;
    reg[1:0] Filter_Equal_2Ux2U_1U_4_11_in2;
    reg gs_ctrl_do_filter_h200;
    reg gs_ctrl_do_filter_h1c;
    reg[2:0] gs_ctrl_do_filter_ha3c;
    reg[1:0] gs_ctrl_do_filter_h18;
    reg[2:0] gs_ctrl_do_filter_ha18;
    reg[1:0] gs_ctrl_do_filter_h10400000000a01;
    reg[2:0] gs_ctrl_do_filter_h13c20000000a01;
    reg gs_ctrl_do_filter_h400000000000;
    wire Filter_LessThan_2Ux2U_1U_4_193_out1;
    reg[2:0] gs_ctrl_do_filter_h3c00000000a00;
    wire[3:0] Filter_Mul_2Ux2U_4U_4_6_out1;
    reg[1:0] Filter_Mul_2Ux2U_4U_4_6_in2;
    reg[1:0] gs_ctrl_do_filter_ha44;
    wire[4:0] Filter_Add_4Ux2U_5U_4_21_out1;
    wire[4:0] Filter_Add_4Ux2U_5U_4_9_out1;
    reg[4:0] s_reg_9;
    wire[1:0] Filter_Add_2Ux1U_2U_4_191_out1;
    wire Filter_LessThan_2Ux2U_1U_4_178_out1;
    wire[1:0] Filter_Add_2Ux1U_2U_4_175_out1;
    wire[1:0] Filter_Add_2Ux1U_2U_4_10_out1;
    reg[1:0] s_reg_8;
    wire[31:0] Filter_Add_32Ux9U_32U_1_189_out1;
    reg[31:0] s_reg_64;
    reg[1:0] s_reg_6;
    reg[7:0] Filter_N_Mux_8_2_0_4_160_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_135_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_76_out1;
    reg[7:0] s_reg_50;
    reg[7:0] Filter_N_Mux_8_2_0_4_159_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_134_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_75_out1;
    reg[7:0] s_reg_49;
    reg[7:0] Filter_N_Mux_8_2_0_4_155_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_132_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_91_out1;
    reg[7:0] s_reg_42;
    reg[7:0] Filter_N_Mux_8_2_0_4_153_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_127_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_90_out1;
    reg[7:0] s_reg_41;
    reg[7:0] Filter_N_Mux_8_2_0_4_147_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_122_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_71_out1;
    reg[8:0] Filter_N_Mux_9_2_1_4_187_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_70_out1;
    reg[8:0] s_reg_33;
    reg[7:0] Filter_N_Mux_8_2_0_4_145_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_116_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_157_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_133_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_88_out1;
    reg[7:0] s_reg_31;
    reg[7:0] Filter_N_Mux_8_2_0_4_150_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_124_out1;
    reg[7:0] Filter_N_Mux_8_2_0_4_89_out1;
    wire[1:0] Filter_Add_2Ux1U_2U_4_58_out1;
    wire Filter_LessThan_2Ux2U_1U_4_34_out1;
    wire Filter_LessThan_2Ux2U_1U_4_33_out1;
    wire[4:0] Filter_Add_4Ux2U_5U_4_7_out1;
    reg[7:0] s_reg_24;
    wire[1:0] Filter_Add_2Ux1U_2U_4_27_out1;
    wire[1:0] Filter_Add_2Ux1U_2U_4_14_out1;
    reg[1:0] s_reg_18;
    wire[4:0] Filter_Add_5Ux1U_5U_4_186_out1;
    wire[4:0] Filter_Add_5Ux5U_5U_4_25_out1;
    wire[3:0] Filter_Add_3Ux2U_4U_4_12_out1;
    wire[4:0] Filter_Mul_4Ux2U_5U_4_24_out1;
    reg[4:0] s_reg_17;
    reg[1:0] s_reg_22;
    reg[1:0] s_reg_13;
    wire[1:0] Filter_Add_2Ux1U_2U_4_32_out1;
    wire Filter_Equal_2Ux2U_1U_4_11_out1;
    reg s_reg_12;
    wire Filter_And_1Ux1U_1U_4_194_out1;
    wire[2:0] Filter_gen_busy_r_4_196_out1;
    wire Filter_Not_1U_1U_1_3_out1;
    reg o_result_m_req_m_trig_req;
    wire[1:0] Filter_Add_2Ux1U_2U_4_22_out1;
    wire Filter_LessThan_2Ux2U_1U_4_26_out1;
    reg[5:0] global_state;
    reg i_rgb_m_busy_req_0;
    reg[7:0] s_reg_35;
    reg[7:0] s_reg_32;
    wire[30:0] Filter_Div_31Ux3U_31U_4_192_in2;
    wire[2:0] Filter_Div_31Ux3U_31U_4_192_in1;
    wire[30:0] Filter_Div_31Ux3U_31U_4_192_out1;
    reg stall0;
    reg[7:0] box_DIN;
    reg box_CE;
    reg box_RW;
    reg[4:0] box_in1;
    wire[7:0] box_out1;
    wire[7:0] center_DIN;
    reg center_CE;
    reg center_RW;
    reg[1:0] center_in1;
    wire[7:0] center_out1;
    reg[7:0] color_DIN;
    reg color_CE;
    reg color_RW;
    reg[1:0] color_in1;
    wire[7:0] color_out1;
    wire[7:0] data_buffer_DIN;
    reg data_buffer_CE;
    reg data_buffer_RW;
    reg[4:0] data_buffer_in1;
    wire[7:0] data_buffer_out1;
    reg[31:0] result_DIN;
    reg result_CE;
    reg result_RW;
    reg[1:0] result_in1;
    wire[31:0] result_out1;

    Filter_RAM_3X32_4 result( 
                        .DIN( result_DIN ),
                        .CE( result_CE ),
                        .RW( result_RW ),
                        .in1( result_in1 ),
                        .out1( result_out1 ),
                        .clk( i_clk )
                      );
    Filter_RAM_18X8_2 data_buffer( 
                        .DIN( data_buffer_DIN ),
                        .CE( data_buffer_CE ),
                        .RW( data_buffer_RW ),
                        .in1( data_buffer_in1 ),
                        .out1( data_buffer_out1 ),
                        .clk( i_clk )
                      );
    Filter_RAM_3X8_1 color( 
                       .DIN( color_DIN ),
                       .CE( color_CE ),
                       .RW( color_RW ),
                       .in1( color_in1 ),
                       .out1( color_out1 ),
                       .clk( i_clk )
                     );
    Filter_RAM_3X8_1 center( 
                       .DIN( center_DIN ),
                       .CE( center_CE ),
                       .RW( center_RW ),
                       .in1( center_in1 ),
                       .out1( center_out1 ),
                       .clk( i_clk )
                     );
    Filter_RAM_27X8_3 box( 
                        .DIN( box_DIN ),
                        .CE( box_CE ),
                        .RW( box_RW ),
                        .in1( box_in1 ),
                        .out1( box_out1 ),
                        .clk( i_clk )
                      );
    Filter_Div_31Ux3U_31U_4 Filter_Div_31Ux3U_31U_4_192( 
                              .in2( Filter_Div_31Ux3U_31U_4_192_in2 ),
                              .in1( Filter_Div_31Ux3U_31U_4_192_in1 ),
                              .out1( Filter_Div_31Ux3U_31U_4_192_out1 ),
                              .clk( i_clk ),
                              .stall( stall0 )
                            );
    
    // resource: regr_en_24
    always @(posedge i_clk)
      begin : drive_o_result_data
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              o_result_data <= {result_out1[7:0], {s_reg_35, s_reg_32}};
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_busy_req_0
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_busy_req_0 <= 1'd1;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    6'd01: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd0;
                      end
                    6'd02: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd1;
                      end
                    6'd11: 
                      begin
                        if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1 && Filter_LessThan_2Ux2U_1U_4_26_out1) 
                          begin
                            i_rgb_m_busy_req_0 <= 1'd0;
                          end 
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_o_result_m_req_m_trig_req
        if (i_rst == 1'b0) 
          begin
            o_result_m_req_m_trig_req <= 1'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    6'd50: 
                      begin
                        o_result_m_req_m_trig_req <= Filter_Not_1U_1U_1_3_out1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx3i1c
    always @(Filter_And_1Ux1U_1U_4_194_out1 or Filter_gen_busy_r_4_196_out1[0] or global_state)
      begin : drive_stall0
        case (global_state) 
          6'd02: 
            begin
              stall0 = Filter_gen_busy_r_4_196_out1[0];
            end
          6'd51: 
            begin
              stall0 = Filter_And_1Ux1U_1U_4_194_out1;
            end
          default: 
            begin
              stall0 = 1'b0;
            end
        endcase
      end
    
    // resource: mux_1bx2i0c
    // resource: regr_en_1
    always @(posedge i_clk)
      begin : drive_s_reg_12
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd02: 
                  begin
                    s_reg_12 <= i_rgb_data[24];
                  end
                6'd05: 
                  begin
                    s_reg_12 <= Filter_Equal_2Ux2U_1U_4_11_out1;
                  end
                6'd09: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1) 
                      begin
                        s_reg_12 <= Filter_Equal_2Ux2U_1U_4_11_out1;
                      end 
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_2bx3i1c
    // resource: regr_en_2
    always @(posedge i_clk)
      begin : drive_s_reg_13
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd05: 
                  begin
                    s_reg_13 <= 2'd0;
                  end
                6'd09: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1) 
                      begin
                        s_reg_13 <= s_reg_22;
                      end 
                  end
                6'd11: 
                  begin
                    if (2'd3 != Filter_Add_2Ux1U_2U_4_22_out1) 
                      begin
                        s_reg_13 <= Filter_Add_2Ux1U_2U_4_22_out1;
                      end 
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_5bx6i1c
    // resource: regr_en_5
    always @(posedge i_clk)
      begin : drive_s_reg_17
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd05: 
                  begin
                    if (s_reg_12) 
                      begin
                        s_reg_17 <= Filter_Mul_4Ux2U_5U_4_24_out1;
                      end 
                    else 
                      begin
                        s_reg_17 <= {1'b0, Filter_Add_3Ux2U_4U_4_12_out1};
                      end
                  end
                6'd09: 
                  begin
                    case (Filter_Add_2Ux1U_2U_4_32_out1) 
                      2'd3: 
                        begin
                          if (s_reg_22 != 2'd2) 
                            begin
                              s_reg_17 <= {1'b0, Filter_Add_3Ux2U_4U_4_12_out1};
                            end 
                          else 
                            begin
                              s_reg_17 <= Filter_Mul_4Ux2U_5U_4_24_out1;
                            end
                        end
                      default: 
                        begin
                          if (s_reg_13 != 2'd2) 
                            begin
                              s_reg_17 <= {1'b0, s_reg_17[3:0]};
                            end 
                          else 
                            begin
                              s_reg_17 <= Filter_Mul_4Ux2U_5U_4_24_out1;
                            end
                        end
                    endcase
                  end
                6'd11: 
                  begin
                    if (2'd3 != Filter_Add_2Ux1U_2U_4_22_out1) 
                      begin
                        s_reg_17 <= Filter_Mul_4Ux2U_5U_4_24_out1;
                      end 
                  end
                6'd13: 
                  begin
                    s_reg_17 <= Filter_Add_5Ux5U_5U_4_25_out1;
                  end
                6'd42: 
                  begin
                    s_reg_17 <= 5'd00;
                  end
                6'd43: 
                  begin
                    s_reg_17 <= {1'b0, Filter_Add_5Ux1U_5U_4_186_out1[3:0]};
                  end
                6'd45: 
                  begin
                    s_reg_17 <= {1'b0, s_reg_17[3:0]};
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_2
    always @(posedge i_clk)
      begin : drive_s_reg_18
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd05, 6'd09, 6'd10: 
                  begin
                    s_reg_18 <= Filter_Add_2Ux1U_2U_4_14_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_2
    always @(posedge i_clk)
      begin : drive_s_reg_22
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              s_reg_22 <= Filter_Add_2Ux1U_2U_4_27_out1;
            end
        endcase
      end
    
    // resource: mux_8bx5i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_24
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd00, 6'd52: 
                  begin
                    s_reg_24 <= {3'b000, Filter_Add_4Ux2U_5U_4_7_out1};
                  end
                6'd09: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1 && !Filter_LessThan_2Ux2U_1U_4_33_out1) 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_34_out1) 
                          begin
                            s_reg_24 <= {3'b000, Filter_Add_4Ux2U_5U_4_7_out1};
                          end 
                        else 
                          begin
                            s_reg_24 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                          end
                      end 
                  end
                6'd11: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1 && !Filter_LessThan_2Ux2U_1U_4_26_out1) 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_34_out1) 
                          begin
                            s_reg_24 <= {3'b000, Filter_Add_4Ux2U_5U_4_7_out1};
                          end 
                        else 
                          begin
                            s_reg_24 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                          end
                      end 
                  end
                6'd16: 
                  begin
                    s_reg_24 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                  end
                6'd23: 
                  begin
                    if (2'd3 != Filter_Add_2Ux1U_2U_4_58_out1) 
                      begin
                        s_reg_24 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                      end 
                  end
                6'd30: 
                  begin
                    s_reg_24 <= Filter_N_Mux_8_2_0_4_89_out1;
                  end
                6'd31: 
                  begin
                    s_reg_24 <= Filter_N_Mux_8_2_0_4_124_out1;
                  end
                6'd32: 
                  begin
                    s_reg_24 <= Filter_N_Mux_8_2_0_4_150_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx5i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_31
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd14: 
                  begin
                    s_reg_31 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                  end
                6'd24, 6'd29: 
                  begin
                    s_reg_31 <= box_out1;
                  end
                6'd30: 
                  begin
                    s_reg_31 <= Filter_N_Mux_8_2_0_4_88_out1;
                  end
                6'd31: 
                  begin
                    s_reg_31 <= Filter_N_Mux_8_2_0_4_133_out1;
                  end
                6'd32: 
                  begin
                    s_reg_31 <= Filter_N_Mux_8_2_0_4_157_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx5i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_32
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd25: 
                  begin
                    s_reg_32 <= box_out1;
                  end
                6'd31: 
                  begin
                    s_reg_32 <= Filter_N_Mux_8_2_0_4_116_out1;
                  end
                6'd32: 
                  begin
                    s_reg_32 <= Filter_N_Mux_8_2_0_4_145_out1;
                  end
                6'd42: 
                  begin
                    s_reg_32 <= center_out1;
                  end
                6'd48: 
                  begin
                    s_reg_32 <= result_out1[7:0];
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_9bx3i0c
    // resource: regr_en_9
    always @(posedge i_clk)
      begin : drive_s_reg_33
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd26: 
                  begin
                    s_reg_33 <= {1'b0, box_out1};
                  end
                6'd27: 
                  begin
                    s_reg_33 <= {1'b0, Filter_N_Mux_8_2_0_4_70_out1};
                  end
                6'd43: 
                  begin
                    s_reg_33 <= Filter_N_Mux_9_2_1_4_187_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx5i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_35
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd15: 
                  begin
                    s_reg_35 <= {3'b000, Filter_Add_5Ux5U_5U_4_25_out1};
                  end
                6'd27: 
                  begin
                    s_reg_35 <= Filter_N_Mux_8_2_0_4_71_out1;
                  end
                6'd31: 
                  begin
                    s_reg_35 <= Filter_N_Mux_8_2_0_4_122_out1;
                  end
                6'd32: 
                  begin
                    s_reg_35 <= Filter_N_Mux_8_2_0_4_147_out1;
                  end
                6'd49: 
                  begin
                    s_reg_35 <= result_out1[7:0];
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx3i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_41
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd30: 
                  begin
                    s_reg_41 <= Filter_N_Mux_8_2_0_4_90_out1;
                  end
                6'd31: 
                  begin
                    s_reg_41 <= Filter_N_Mux_8_2_0_4_127_out1;
                  end
                6'd32: 
                  begin
                    s_reg_41 <= Filter_N_Mux_8_2_0_4_153_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx3i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_42
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd30: 
                  begin
                    s_reg_42 <= Filter_N_Mux_8_2_0_4_91_out1;
                  end
                6'd31: 
                  begin
                    s_reg_42 <= Filter_N_Mux_8_2_0_4_132_out1;
                  end
                6'd32: 
                  begin
                    s_reg_42 <= Filter_N_Mux_8_2_0_4_155_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx3i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_49
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd28: 
                  begin
                    s_reg_49 <= Filter_N_Mux_8_2_0_4_75_out1;
                  end
                6'd31: 
                  begin
                    s_reg_49 <= Filter_N_Mux_8_2_0_4_134_out1;
                  end
                6'd32: 
                  begin
                    s_reg_49 <= Filter_N_Mux_8_2_0_4_159_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_8bx3i0c
    // resource: regr_en_8
    always @(posedge i_clk)
      begin : drive_s_reg_50
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd28: 
                  begin
                    s_reg_50 <= Filter_N_Mux_8_2_0_4_76_out1;
                  end
                6'd31: 
                  begin
                    s_reg_50 <= Filter_N_Mux_8_2_0_4_135_out1;
                  end
                6'd32: 
                  begin
                    s_reg_50 <= Filter_N_Mux_8_2_0_4_160_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_2bx2i1c
    // resource: regr_en_2
    always @(posedge i_clk)
      begin : drive_s_reg_6
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd00, 6'd52: 
                  begin
                    s_reg_6 <= 2'd0;
                  end
                6'd09: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1 && !Filter_LessThan_2Ux2U_1U_4_33_out1) 
                      begin
                        s_reg_6 <= s_reg_18;
                      end 
                  end
                6'd11: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1 && !Filter_LessThan_2Ux2U_1U_4_26_out1) 
                      begin
                        s_reg_6 <= s_reg_18;
                      end 
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_32bx3i0c
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_64
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd02: 
                  begin
                    s_reg_64 <= {7'b0000000, i_rgb_data};
                  end
                6'd42: 
                  begin
                    s_reg_64 <= result_out1;
                  end
                6'd44: 
                  begin
                    /* state64 */
                    s_reg_64 <= Filter_Add_32Ux9U_32U_1_189_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_2bx6i1c
    // resource: regr_en_2
    always @(posedge i_clk)
      begin : drive_s_reg_8
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd01: 
                  begin
                    s_reg_8 <= 2'd0;
                  end
                6'd02: 
                  begin
                    s_reg_8 <= Filter_Add_2Ux1U_2U_4_10_out1;
                  end
                6'd05: 
                  begin
                    if (s_reg_12) 
                      begin
                      end 
                    else 
                      begin
                        s_reg_8 <= 2'd0;
                      end
                  end
                6'd09: 
                  begin
                    case (Filter_Add_2Ux1U_2U_4_32_out1) 
                      2'd3: 
                        begin
                          s_reg_8 <= 2'd0;
                        end
                      default: 
                        begin
                          s_reg_8 <= Filter_Add_2Ux1U_2U_4_32_out1;
                        end
                    endcase
                  end
                6'd11: 
                  begin
                    if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1) 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_26_out1) 
                          begin
                          end 
                        else 
                          begin
                            s_reg_8 <= 2'd0;
                          end
                      end 
                  end
                6'd23: 
                  begin
                    case (Filter_Add_2Ux1U_2U_4_58_out1) 
                      2'd3: 
                        begin
                          s_reg_8 <= 2'd0;
                        end
                      default: 
                        begin
                          s_reg_8 <= Filter_Add_2Ux1U_2U_4_58_out1;
                        end
                    endcase
                  end
                6'd40: 
                  begin
                    s_reg_8 <= Filter_Add_2Ux1U_2U_4_175_out1;
                  end
                6'd41: 
                  begin
                    if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                      begin
                      end 
                    else 
                      begin
                        s_reg_8 <= 2'd0;
                      end
                  end
                6'd46: 
                  begin
                    s_reg_8 <= Filter_Add_2Ux1U_2U_4_191_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_5bx3i0c
    // resource: regr_en_5
    always @(posedge i_clk)
      begin : drive_s_reg_9
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                6'd02: 
                  begin
                    s_reg_9 <= Filter_Add_4Ux2U_5U_4_9_out1;
                  end
                6'd06: 
                  begin
                    s_reg_9 <= Filter_Add_4Ux2U_5U_4_21_out1;
                  end
                6'd12, 6'd41, 6'd47: 
                  begin
                    s_reg_9 <= Filter_Add_5Ux5U_5U_4_25_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_2bx3i1c
    always @(s_reg_18 or s_reg_6 or gs_ctrl_do_filter_ha44)
      begin : drive_Filter_Mul_2Ux2U_4U_4_6_in2
        case (gs_ctrl_do_filter_ha44) 
          2'd1: 
            begin
              Filter_Mul_2Ux2U_4U_4_6_in2 = s_reg_6;
            end
          2'd2: 
            begin
              Filter_Mul_2Ux2U_4U_4_6_in2 = s_reg_18;
            end
          default: 
            begin
              Filter_Mul_2Ux2U_4U_4_6_in2 = 2'd0;
            end
        endcase
      end
    
    // resource: Filter_Mul_2Ux2U_4U_4  instance: Filter_Mul_2Ux2U_4U_4_6
    assign Filter_Mul_2Ux2U_4U_4_6_out1 = {30'b000000000000000000000000000000, Filter_Mul_2Ux2U_4U_4_6_in2} * 4'd03;
    
    // resource: Filter_Add_4Ux2U_5U_4  instance: Filter_Add_4Ux2U_5U_4_7
    assign Filter_Add_4Ux2U_5U_4_7_out1 = {1'b0, Filter_Mul_2Ux2U_4U_4_6_out1} + 5'd02;
    
    // resource: mux_2bx5i3c
    always @(s_reg_18 or s_reg_8 or Filter_LessThan_2Ux2U_1U_4_193_out1 or gs_ctrl_do_filter_h3c00000000a00)
      begin : drive_result_in1
        case (gs_ctrl_do_filter_h3c00000000a00) 
          3'd1: 
            begin
              result_in1 = s_reg_18;
            end
          3'd2: 
            begin
              result_in1 = s_reg_8;
            end
          3'd3: 
            begin
              if (Filter_LessThan_2Ux2U_1U_4_193_out1) 
                begin
                  result_in1 = s_reg_8;
                end 
              else 
                begin
                  /* state70 */
                  result_in1 = 2'd0;
                end
            end
          3'd4: 
            begin
              result_in1 = 2'd1;
            end
          3'd5: 
            begin
              result_in1 = 2'd2;
            end
          default: 
            begin
              result_in1 = 2'd0;
            end
        endcase
      end
    
    // resource: mux_32bx2i1c
    always @(Filter_Div_31Ux3U_31U_4_192_out1 or gs_ctrl_do_filter_h400000000000)
      begin : drive_result_DIN
        if (gs_ctrl_do_filter_h400000000000) 
          begin
            result_DIN = {1'b0, Filter_Div_31Ux3U_31U_4_192_out1};
          end 
        else 
          begin
            result_DIN = 32'd0000000000;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or Filter_Add_2Ux1U_2U_4_22_out1 or Filter_LessThan_2Ux2U_1U_4_26_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or Filter_LessThan_2Ux2U_1U_4_33_out1 or Filter_LessThan_2Ux2U_1U_4_34_out1 or Filter_LessThan_2Ux2U_1U_4_178_out1 or gs_ctrl_do_filter_h13c20000000a01)
      begin : drive_result_CE
        if (stall0) 
          begin
            result_CE = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h13c20000000a01) 
              3'd1: 
                begin
                  result_CE = 1'b1;
                end
              3'd2: 
                begin
                  if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1 && (!Filter_LessThan_2Ux2U_1U_4_33_out1 && Filter_LessThan_2Ux2U_1U_4_34_out1)) 
                    begin
                      result_CE = 1'b1;
                    end 
                  else 
                    begin
                      result_CE = 1'b0;
                    end
                end
              3'd3: 
                begin
                  if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1 && (!Filter_LessThan_2Ux2U_1U_4_26_out1 && Filter_LessThan_2Ux2U_1U_4_34_out1)) 
                    begin
                      result_CE = 1'b1;
                    end 
                  else 
                    begin
                      result_CE = 1'b0;
                    end
                end
              3'd4: 
                begin
                  if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                    begin
                      result_CE = 1'b0;
                    end 
                  else 
                    begin
                      result_CE = 1'b1;
                    end
                end
              default: 
                begin
                  result_CE = 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or Filter_Add_2Ux1U_2U_4_22_out1 or Filter_LessThan_2Ux2U_1U_4_26_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or Filter_LessThan_2Ux2U_1U_4_33_out1 or Filter_LessThan_2Ux2U_1U_4_34_out1 or gs_ctrl_do_filter_h10400000000a01)
      begin : drive_result_RW
        if (stall0) 
          begin
            result_RW = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h10400000000a01) 
              2'd1: 
                begin
                  result_RW = 1'b1;
                end
              2'd2: 
                begin
                  if (2'd3 == Filter_Add_2Ux1U_2U_4_32_out1 && (!Filter_LessThan_2Ux2U_1U_4_33_out1 && Filter_LessThan_2Ux2U_1U_4_34_out1)) 
                    begin
                      result_RW = 1'b1;
                    end 
                  else 
                    begin
                      result_RW = 1'b0;
                    end
                end
              2'd3: 
                begin
                  if (2'd3 == Filter_Add_2Ux1U_2U_4_22_out1 && (!Filter_LessThan_2Ux2U_1U_4_26_out1 && Filter_LessThan_2Ux2U_1U_4_34_out1)) 
                    begin
                      result_RW = 1'b1;
                    end 
                  else 
                    begin
                      result_RW = 1'b0;
                    end
                end
              default: 
                begin
                  result_RW = 1'b0;
                end
            endcase
          end
      end
    
    // resource: Filter_Add_4Ux2U_5U_4  instance: Filter_Add_4Ux2U_5U_4_9
    assign Filter_Add_4Ux2U_5U_4_9_out1 = {1'b0, Filter_Mul_2Ux2U_4U_4_6_out1} + {3'b000, s_reg_8};
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_10
    assign Filter_Add_2Ux1U_2U_4_10_out1 = s_reg_8 + 2'd1;
    
    // resource: mux_2bx5i3c
    always @(Filter_Add_2Ux1U_2U_4_22_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or gs_ctrl_do_filter_ha18)
      begin : drive_color_in1
        case (gs_ctrl_do_filter_ha18) 
          3'd1: 
            begin
              color_in1 = 2'd1;
            end
          3'd2: 
            begin
              color_in1 = 2'd2;
            end
          3'd3: 
            begin
              case (Filter_Add_2Ux1U_2U_4_32_out1) 
                2'd3: 
                  begin
                    color_in1 = 2'd0;
                  end
                default: 
                  begin
                    color_in1 = Filter_Add_2Ux1U_2U_4_32_out1;
                  end
              endcase
            end
          3'd4: 
            begin
              color_in1 = Filter_Add_2Ux1U_2U_4_22_out1;
            end
          default: 
            begin
              color_in1 = 2'd0;
            end
        endcase
      end
    
    // resource: mux_8bx3i0c
    always @(i_rgb_data[7:0] or s_reg_64[23:8] or gs_ctrl_do_filter_h18)
      begin : drive_color_DIN
        case (gs_ctrl_do_filter_h18) 
          2'd1: 
            begin
              color_DIN = s_reg_64[15:8];
            end
          2'd2: 
            begin
              color_DIN = s_reg_64[23:16];
            end
          default: 
            begin
              color_DIN = i_rgb_data[7:0];
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or s_reg_12 or Filter_Equal_2Ux2U_1U_4_11_out1 or Filter_Add_2Ux1U_2U_4_22_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or Filter_LessThan_2Ux2U_1U_4_33_out1 or gs_ctrl_do_filter_ha3c)
      begin : drive_color_CE
        if (stall0) 
          begin
            color_CE = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_ha3c) 
              3'd1: 
                begin
                  color_CE = 1'b1;
                end
              3'd2: 
                begin
                  if (s_reg_12) 
                    begin
                      color_CE = 1'b1;
                    end 
                  else 
                    begin
                      if (Filter_Equal_2Ux2U_1U_4_11_out1) 
                        begin
                          color_CE = 1'b1;
                        end 
                      else 
                        begin
                          color_CE = 1'b0;
                        end
                    end
                end
              3'd3: 
                begin
                  case (Filter_Add_2Ux1U_2U_4_32_out1) 
                    2'd3: 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_33_out1 && Filter_Equal_2Ux2U_1U_4_11_out1) 
                          begin
                            color_CE = 1'b1;
                          end 
                        else 
                          begin
                            color_CE = 1'b0;
                          end
                      end
                    default: 
                      begin
                        if (s_reg_12) 
                          begin
                            color_CE = 1'b1;
                          end 
                        else 
                          begin
                            color_CE = 1'b0;
                          end
                      end
                  endcase
                end
              3'd4: 
                begin
                  if (2'd3 != Filter_Add_2Ux1U_2U_4_22_out1) 
                    begin
                      color_CE = 1'b1;
                    end 
                  else 
                    begin
                      color_CE = 1'b0;
                    end
                end
              default: 
                begin
                  color_CE = 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or gs_ctrl_do_filter_h1c)
      begin : drive_color_RW
        if (stall0) 
          begin
            color_RW = 1'b0;
          end 
        else 
          begin
            if (gs_ctrl_do_filter_h1c) 
              begin
                color_RW = 1'b1;
              end 
            else 
              begin
                color_RW = 1'b0;
              end
          end
      end
    
    // resource: mux_2bx2i1c
    always @(s_reg_22 or gs_ctrl_do_filter_h200)
      begin : drive_Filter_Equal_2Ux2U_1U_4_11_in2
        if (gs_ctrl_do_filter_h200) 
          begin
            Filter_Equal_2Ux2U_1U_4_11_in2 = s_reg_22;
          end 
        else 
          begin
            Filter_Equal_2Ux2U_1U_4_11_in2 = 2'd0;
          end
      end
    
    // resource: Filter_Equal_2Ux2U_1U_4  instance: Filter_Equal_2Ux2U_1U_4_11
    assign Filter_Equal_2Ux2U_1U_4_11_out1 = Filter_Equal_2Ux2U_1U_4_11_in2 == 2'd2;
    
    // instance: drive_Filter_Add_3Ux2U_4U_4_12_in2
    assign Filter_Add_3Ux2U_4U_4_12_in2 = {s_reg_6, 1'b0};
    
    // resource: Filter_Add_3Ux2U_4U_4  instance: Filter_Add_3Ux2U_4U_4_12
    assign Filter_Add_3Ux2U_4U_4_12_out1 = {1'b0, Filter_Add_3Ux2U_4U_4_12_in2} + {2'b00, Filter_Equal_2Ux2U_1U_4_11_in2};
    
    // resource: mux_4bx2i2c
    always @(gs_ctrl_do_filter_h7e0080)
      begin : drive_Filter_Mul_4Ux2U_5U_4_24_in2
        if (gs_ctrl_do_filter_h7e0080) 
          begin
            Filter_Mul_4Ux2U_5U_4_24_in2 = 4'd06;
          end 
        else 
          begin
            Filter_Mul_4Ux2U_5U_4_24_in2 = 4'd09;
          end
      end
    
    // resource: mux_2bx5i1c
    always @(s_reg_8 or Filter_Add_2Ux1U_2U_4_22_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or Filter_Add_2Ux1U_2U_4_58_out1 or Filter_LessThan_2Ux2U_1U_4_178_out1 or gs_ctrl_do_filter_ha7fffffffb80)
      begin : drive_Filter_Mul_4Ux2U_5U_4_24_in1
        case (gs_ctrl_do_filter_ha7fffffffb80) 
          3'd1: 
            begin
              Filter_Mul_4Ux2U_5U_4_24_in1 = s_reg_8;
            end
          3'd2: 
            begin
              case (Filter_Add_2Ux1U_2U_4_32_out1) 
                2'd3: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = 2'd0;
                  end
                default: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = Filter_Add_2Ux1U_2U_4_32_out1;
                  end
              endcase
            end
          3'd3: 
            begin
              case (Filter_Add_2Ux1U_2U_4_22_out1) 
                2'd3: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = 2'd0;
                  end
                default: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = Filter_Add_2Ux1U_2U_4_22_out1;
                  end
              endcase
            end
          3'd4: 
            begin
              case (Filter_Add_2Ux1U_2U_4_58_out1) 
                2'd3: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = 2'd0;
                  end
                default: 
                  begin
                    Filter_Mul_4Ux2U_5U_4_24_in1 = Filter_Add_2Ux1U_2U_4_58_out1;
                  end
              endcase
            end
          3'd5: 
            begin
              if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                begin
                  Filter_Mul_4Ux2U_5U_4_24_in1 = s_reg_8;
                end 
              else 
                begin
                  Filter_Mul_4Ux2U_5U_4_24_in1 = 2'd0;
                end
            end
          default: 
            begin
              Filter_Mul_4Ux2U_5U_4_24_in1 = 2'd0;
            end
        endcase
      end
    
    // resource: Filter_Mul_4Ux2U_5U_4  instance: Filter_Mul_4Ux2U_5U_4_24
    assign Filter_Mul_4Ux2U_5U_4_24_out1 = {1'b0, Filter_Mul_4Ux2U_5U_4_24_in2} * {3'b000, Filter_Mul_4Ux2U_5U_4_24_in1};
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_14
    assign Filter_Add_2Ux1U_2U_4_14_out1 = s_reg_6 + 2'd1;
    
    // resource: Filter_Add_5Ux5U_5U_4  instance: Filter_Add_5Ux5U_5U_4_16
    assign Filter_Add_5Ux5U_5U_4_16_out1 = s_reg_17 + s_reg_9;
    
    // resource: Filter_Equal_2Ux2U_1U_4  instance: Filter_Equal_2Ux2U_1U_4_18
    assign Filter_Equal_2Ux2U_1U_4_18_out1 = s_reg_13 == 2'd2;
    
    // resource: Filter_Add_5Ux5U_5U_4  instance: Filter_Add_5Ux5U_5U_4_20
    assign Filter_Add_5Ux5U_5U_4_20_out1 = s_reg_17 + s_reg_24[4:0];
    
    // resource: Filter_Add_4Ux2U_5U_4  instance: Filter_Add_4Ux2U_5U_4_21
    assign Filter_Add_4Ux2U_5U_4_21_out1 = {1'b0, Filter_Mul_2Ux2U_4U_4_6_out1} + {3'b000, s_reg_13};
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_22
    assign Filter_Add_2Ux1U_2U_4_22_out1 = s_reg_13 + 2'd1;
    
    // resource: mux_5bx9i0c
    always @(s_reg_17 or s_reg_24[4:0] or s_reg_31[4:0] or s_reg_35[4:0] or s_reg_9 or Filter_Mul_4Ux2U_5U_4_24_out1 or Filter_Add_5Ux5U_5U_4_16_out1 or Filter_Add_5Ux5U_5U_4_20_out1 or Filter_Add_5Ux5U_5U_4_25_out1 or Filter_NotEQ_4Ux3U_1U_4_183_out1 or gs_ctrl_do_filter_h27ffffbf0500)
      begin : drive_box_in1
        case (gs_ctrl_do_filter_h27ffffbf0500) 
          4'd01: 
            begin
              box_in1 = Filter_Add_5Ux5U_5U_4_25_out1;
            end
          4'd02: 
            begin
              box_in1 = Filter_Add_5Ux5U_5U_4_16_out1;
            end
          4'd03: 
            begin
              box_in1 = s_reg_24[4:0];
            end
          4'd04: 
            begin
              box_in1 = s_reg_9;
            end
          4'd05: 
            begin
              box_in1 = s_reg_17;
            end
          4'd06: 
            begin
              box_in1 = s_reg_31[4:0];
            end
          4'd07: 
            begin
              box_in1 = s_reg_35[4:0];
            end
          4'd08: 
            begin
              box_in1 = Filter_Mul_4Ux2U_5U_4_24_out1;
            end
          4'd09: 
            begin
              if (s_reg_17[3:0] != 4'd04 && Filter_NotEQ_4Ux3U_1U_4_183_out1) 
                begin
                  box_in1 = Filter_Add_5Ux5U_5U_4_25_out1;
                end 
              else 
                begin
                  box_in1 = s_reg_9;
                end
            end
          default: 
            begin
              box_in1 = Filter_Add_5Ux5U_5U_4_20_out1;
            end
        endcase
      end
    
    // resource: mux_8bx11i0c
    always @(s_reg_24 or s_reg_31 or s_reg_32 or s_reg_35 or s_reg_41 or s_reg_42 or s_reg_49 or s_reg_50 or color_out1 or data_buffer_out1 or Filter_N_Mux_8_2_0_4_143_out1 or gs_ctrl_do_filter_h1ff00000100)
      begin : drive_box_DIN
        case (gs_ctrl_do_filter_h1ff00000100) 
          4'd01: 
            begin
              box_DIN = data_buffer_out1;
            end
          4'd02: 
            begin
              box_DIN = Filter_N_Mux_8_2_0_4_143_out1;
            end
          4'd03: 
            begin
              box_DIN = s_reg_32;
            end
          4'd04: 
            begin
              box_DIN = s_reg_35;
            end
          4'd05: 
            begin
              box_DIN = s_reg_24;
            end
          4'd06: 
            begin
              box_DIN = s_reg_41;
            end
          4'd07: 
            begin
              box_DIN = s_reg_42;
            end
          4'd08: 
            begin
              box_DIN = s_reg_31;
            end
          4'd09: 
            begin
              box_DIN = s_reg_49;
            end
          4'd10: 
            begin
              box_DIN = s_reg_50;
            end
          default: 
            begin
              box_DIN = color_out1;
            end
        endcase
      end
    
    // resource: mux_1bx4i2c
    always @(stall0 or s_reg_17[3:0] or Filter_Equal_2Ux2U_1U_4_18_out1 or Filter_NotEQ_2Ux2U_1U_4_28_out1 or Filter_Add_2Ux1U_2U_4_58_out1 or Filter_LessThan_2Ux2U_1U_4_178_out1 or Filter_Equal_4Ux3U_1U_4_182_out1 or Filter_NotEQ_4Ux3U_1U_4_183_out1 or gs_ctrl_do_filter_h27ffffbf0540)
      begin : drive_box_CE
        if (stall0) 
          begin
            box_CE = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h27ffffbf0540) 
              3'd1: 
                begin
                  if (Filter_Equal_2Ux2U_1U_4_18_out1) 
                    begin
                      box_CE = Filter_Equal_2Ux2U_1U_4_18_out1;
                    end 
                  else 
                    begin
                      box_CE = 1'b0;
                    end
                end
              3'd2: 
                begin
                  if (Filter_NotEQ_2Ux2U_1U_4_28_out1) 
                    begin
                      box_CE = Filter_NotEQ_2Ux2U_1U_4_28_out1;
                    end 
                  else 
                    begin
                      box_CE = 1'b0;
                    end
                end
              3'd3: 
                begin
                  box_CE = 1'b1;
                end
              3'd4: 
                begin
                  if (2'd3 == Filter_Add_2Ux1U_2U_4_58_out1) 
                    begin
                      box_CE = 1'b1;
                    end 
                  else 
                    begin
                      box_CE = 1'b0;
                    end
                end
              3'd5: 
                begin
                  if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                    begin
                      box_CE = 1'b1;
                    end 
                  else 
                    begin
                      box_CE = 1'b0;
                    end
                end
              3'd6: 
                begin
                  if (Filter_NotEQ_4Ux3U_1U_4_183_out1) 
                    begin
                      box_CE = 1'b1;
                    end 
                  else 
                    begin
                      box_CE = 1'b0;
                    end
                end
              3'd7: 
                begin
                  if (s_reg_17[3:0] != 4'd04 && Filter_NotEQ_4Ux3U_1U_4_183_out1) 
                    begin
                      box_CE = 1'b1;
                    end 
                  else 
                    begin
                      if (s_reg_17[3:0] == 4'd04 && Filter_Equal_4Ux3U_1U_4_182_out1) 
                        begin
                          box_CE = 1'b1;
                        end 
                      else 
                        begin
                          box_CE = 1'b0;
                        end
                    end
                end
              default: 
                begin
                  box_CE = 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx4i2c
    always @(stall0 or Filter_Equal_2Ux2U_1U_4_18_out1 or Filter_NotEQ_2Ux2U_1U_4_28_out1 or gs_ctrl_do_filter_h1ff00000540)
      begin : drive_box_RW
        if (stall0) 
          begin
            box_RW = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h1ff00000540) 
              2'd1: 
                begin
                  if (Filter_Equal_2Ux2U_1U_4_18_out1) 
                    begin
                      box_RW = Filter_Equal_2Ux2U_1U_4_18_out1;
                    end 
                  else 
                    begin
                      box_RW = 1'b0;
                    end
                end
              2'd2: 
                begin
                  if (Filter_NotEQ_2Ux2U_1U_4_28_out1) 
                    begin
                      box_RW = Filter_NotEQ_2Ux2U_1U_4_28_out1;
                    end 
                  else 
                    begin
                      box_RW = 1'b0;
                    end
                end
              2'd3: 
                begin
                  box_RW = 1'b1;
                end
              default: 
                begin
                  box_RW = 1'b0;
                end
            endcase
          end
      end
    
    // resource: Filter_NotEQ_2Ux2U_1U_4  instance: Filter_NotEQ_2Ux2U_1U_4_28
    assign Filter_NotEQ_2Ux2U_1U_4_28_out1 = s_reg_13 != 2'd2;
    
    // resource: mux_5bx11i9c
    always @(s_reg_17[3:0] or s_reg_9 or Filter_Add_2Ux1U_2U_4_58_out1 or gs_ctrl_do_filter_h87febffdfb00)
      begin : drive_Filter_Add_5Ux5U_5U_4_25_in1
        case (gs_ctrl_do_filter_h87febffdfb00) 
          4'd01: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = s_reg_9;
            end
          4'd02: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd01;
            end
          4'd03: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd02;
            end
          4'd04: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd04;
            end
          4'd05: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd05;
            end
          4'd06: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd07;
            end
          4'd07: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd08;
            end
          4'd08: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd03;
            end
          4'd09: 
            begin
              case (Filter_Add_2Ux1U_2U_4_58_out1) 
                2'd3: 
                  begin
                    Filter_Add_5Ux5U_5U_4_25_in1 = 5'd04;
                  end
                default: 
                  begin
                    Filter_Add_5Ux5U_5U_4_25_in1 = 5'd01;
                  end
              endcase
            end
          4'd10: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd06;
            end
          4'd11: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = 5'd00;
            end
          default: 
            begin
              Filter_Add_5Ux5U_5U_4_25_in1 = {1'b0, s_reg_17[3:0]};
            end
        endcase
      end
    
    // resource: Filter_Add_5Ux5U_5U_4  instance: Filter_Add_5Ux5U_5U_4_25
    assign Filter_Add_5Ux5U_5U_4_25_out1 = Filter_Mul_4Ux2U_5U_4_24_out1 + Filter_Add_5Ux5U_5U_4_25_in1;
    
    // resource: Filter_LessThan_2Ux2U_1U_4  instance: Filter_LessThan_2Ux2U_1U_4_26
    assign Filter_LessThan_2Ux2U_1U_4_26_out1 = s_reg_8 < 2'd3;
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_27
    assign Filter_Add_2Ux1U_2U_4_27_out1 = s_reg_13 + 2'd1;
    
    // resource: mux_5bx2i0c
    always @(Filter_Mul_4Ux2U_5U_4_24_out1 or Filter_Add_5Ux5U_5U_4_25_out1 or gs_ctrl_do_filter_h20000)
      begin : drive_data_buffer_in1
        if (gs_ctrl_do_filter_h20000) 
          begin
            data_buffer_in1 = Filter_Mul_4Ux2U_5U_4_24_out1;
          end 
        else 
          begin
            data_buffer_in1 = Filter_Add_5Ux5U_5U_4_25_out1;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or Filter_NotEQ_2Ux2U_1U_4_28_out1 or gs_ctrl_do_filter_h7e00800)
      begin : drive_data_buffer_CE
        if (stall0) 
          begin
            data_buffer_CE = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h7e00800) 
              2'd1: 
                begin
                  if (Filter_NotEQ_2Ux2U_1U_4_28_out1) 
                    begin
                      data_buffer_CE = 1'b1;
                    end 
                  else 
                    begin
                      data_buffer_CE = 1'b0;
                    end
                end
              2'd2: 
                begin
                  data_buffer_CE = 1'b1;
                end
              default: 
                begin
                  data_buffer_CE = 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or gs_ctrl_do_filter_h7e0000)
      begin : drive_data_buffer_RW
        if (stall0) 
          begin
            data_buffer_RW = 1'b0;
          end 
        else 
          begin
            if (gs_ctrl_do_filter_h7e0000) 
              begin
                data_buffer_RW = 1'b1;
              end 
            else 
              begin
                data_buffer_RW = 1'b0;
              end
          end
      end
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_32
    assign Filter_Add_2Ux1U_2U_4_32_out1 = s_reg_8 + 2'd1;
    
    // resource: Filter_LessThan_2Ux2U_1U_4  instance: Filter_LessThan_2Ux2U_1U_4_33
    assign Filter_LessThan_2Ux2U_1U_4_33_out1 = s_reg_22 < 2'd3;
    
    // resource: Filter_LessThan_2Ux2U_1U_4  instance: Filter_LessThan_2Ux2U_1U_4_34
    assign Filter_LessThan_2Ux2U_1U_4_34_out1 = s_reg_18 < 2'd3;
    
    // instance: drive_data_buffer_DIN
    assign data_buffer_DIN = box_out1;
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_58
    assign Filter_Add_2Ux1U_2U_4_58_out1 = s_reg_8 + 2'd1;
    
    // resource: mux_2bx2i1c
    always @(s_reg_8 or gs_ctrl_do_filter_h20000000000)
      begin : drive_center_in1
        if (gs_ctrl_do_filter_h20000000000) 
          begin
            center_in1 = 2'd0;
          end 
        else 
          begin
            center_in1 = s_reg_8;
          end
      end
    
    // instance: drive_center_DIN
    assign center_DIN = box_out1;
    
    // resource: mux_1bx2i2c
    always @(stall0 or Filter_LessThan_2Ux2U_1U_4_178_out1 or Filter_LessThan_2Ux2U_1U_4_193_out1 or gs_ctrl_do_filter_h820001000000)
      begin : drive_center_CE
        if (stall0) 
          begin
            center_CE = 1'b0;
          end 
        else 
          begin
            case (gs_ctrl_do_filter_h820001000000) 
              2'd1: 
                begin
                  center_CE = 1'b1;
                end
              2'd2: 
                begin
                  if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                    begin
                      center_CE = 1'b0;
                    end 
                  else 
                    begin
                      center_CE = 1'b1;
                    end
                end
              2'd3: 
                begin
                  if (Filter_LessThan_2Ux2U_1U_4_193_out1) 
                    begin
                      center_CE = 1'b1;
                    end 
                  else 
                    begin
                      center_CE = 1'b0;
                    end
                end
              default: 
                begin
                  center_CE = 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    always @(stall0 or gs_ctrl_do_filter_h1000000)
      begin : drive_center_RW
        if (stall0) 
          begin
            center_RW = 1'b0;
          end 
        else 
          begin
            if (gs_ctrl_do_filter_h1000000) 
              begin
                center_RW = 1'b1;
              end 
            else 
              begin
                center_RW = 1'b0;
              end
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_69
    assign Filter_LessThan_8Ux8U_1U_4_69_out1 = s_reg_33[7:0] < box_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_33[7:0] or box_out1 or Filter_LessThan_8Ux8U_1U_4_69_out1)
      begin : Filter_N_Mux_8_2_0_4_70
        if (Filter_LessThan_8Ux8U_1U_4_69_out1) 
          begin
            Filter_N_Mux_8_2_0_4_70_out1 = s_reg_33[7:0];
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_70_out1 = box_out1;
          end
      end
    always @(s_reg_33[7:0] or box_out1 or Filter_LessThan_8Ux8U_1U_4_69_out1)
      begin : Filter_N_Mux_8_2_0_4_71
        if (Filter_LessThan_8Ux8U_1U_4_69_out1) 
          begin
            Filter_N_Mux_8_2_0_4_71_out1 = box_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_71_out1 = s_reg_33[7:0];
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_74
    assign Filter_LessThan_8Ux8U_1U_4_74_out1 = s_reg_31 < box_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_31 or box_out1 or Filter_LessThan_8Ux8U_1U_4_74_out1)
      begin : Filter_N_Mux_8_2_0_4_75
        if (Filter_LessThan_8Ux8U_1U_4_74_out1) 
          begin
            Filter_N_Mux_8_2_0_4_75_out1 = s_reg_31;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_75_out1 = box_out1;
          end
      end
    always @(s_reg_31 or box_out1 or Filter_LessThan_8Ux8U_1U_4_74_out1)
      begin : Filter_N_Mux_8_2_0_4_76
        if (Filter_LessThan_8Ux8U_1U_4_74_out1) 
          begin
            Filter_N_Mux_8_2_0_4_76_out1 = box_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_76_out1 = s_reg_31;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_80
    assign Filter_LessThan_8Ux8U_1U_4_80_out1 = s_reg_31 < box_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_31 or box_out1 or Filter_LessThan_8Ux8U_1U_4_80_out1)
      begin : Filter_N_Mux_8_2_0_4_81
        if (Filter_LessThan_8Ux8U_1U_4_80_out1) 
          begin
            Filter_N_Mux_8_2_0_4_81_out1 = s_reg_31;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_81_out1 = box_out1;
          end
      end
    always @(s_reg_31 or box_out1 or Filter_LessThan_8Ux8U_1U_4_80_out1)
      begin : Filter_N_Mux_8_2_0_4_82
        if (Filter_LessThan_8Ux8U_1U_4_80_out1) 
          begin
            Filter_N_Mux_8_2_0_4_82_out1 = box_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_82_out1 = s_reg_31;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_83
    assign Filter_LessThan_8Ux8U_1U_4_83_out1 = s_reg_49 < Filter_N_Mux_8_2_0_4_81_out1;
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_84
    assign Filter_LessThan_8Ux8U_1U_4_84_out1 = s_reg_50 < Filter_N_Mux_8_2_0_4_82_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_49 or Filter_N_Mux_8_2_0_4_81_out1 or Filter_LessThan_8Ux8U_1U_4_83_out1)
      begin : Filter_N_Mux_8_2_0_4_85
        if (Filter_LessThan_8Ux8U_1U_4_83_out1) 
          begin
            Filter_N_Mux_8_2_0_4_85_out1 = Filter_N_Mux_8_2_0_4_81_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_85_out1 = s_reg_49;
          end
      end
    always @(s_reg_50 or Filter_N_Mux_8_2_0_4_82_out1 or Filter_LessThan_8Ux8U_1U_4_84_out1)
      begin : Filter_N_Mux_8_2_0_4_86
        if (Filter_LessThan_8Ux8U_1U_4_84_out1) 
          begin
            Filter_N_Mux_8_2_0_4_86_out1 = s_reg_50;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_86_out1 = Filter_N_Mux_8_2_0_4_82_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_87
    assign Filter_LessThan_8Ux8U_1U_4_87_out1 = Filter_N_Mux_8_2_0_4_86_out1 < Filter_N_Mux_8_2_0_4_85_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_49 or Filter_N_Mux_8_2_0_4_81_out1 or Filter_LessThan_8Ux8U_1U_4_83_out1)
      begin : Filter_N_Mux_8_2_0_4_88
        if (Filter_LessThan_8Ux8U_1U_4_83_out1) 
          begin
            Filter_N_Mux_8_2_0_4_88_out1 = s_reg_49;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_88_out1 = Filter_N_Mux_8_2_0_4_81_out1;
          end
      end
    always @(s_reg_50 or Filter_N_Mux_8_2_0_4_82_out1 or Filter_LessThan_8Ux8U_1U_4_84_out1)
      begin : Filter_N_Mux_8_2_0_4_89
        if (Filter_LessThan_8Ux8U_1U_4_84_out1) 
          begin
            Filter_N_Mux_8_2_0_4_89_out1 = Filter_N_Mux_8_2_0_4_82_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_89_out1 = s_reg_50;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_85_out1 or Filter_N_Mux_8_2_0_4_86_out1 or Filter_LessThan_8Ux8U_1U_4_87_out1)
      begin : Filter_N_Mux_8_2_0_4_90
        if (Filter_LessThan_8Ux8U_1U_4_87_out1) 
          begin
            Filter_N_Mux_8_2_0_4_90_out1 = Filter_N_Mux_8_2_0_4_86_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_90_out1 = Filter_N_Mux_8_2_0_4_85_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_85_out1 or Filter_N_Mux_8_2_0_4_86_out1 or Filter_LessThan_8Ux8U_1U_4_87_out1)
      begin : Filter_N_Mux_8_2_0_4_91
        if (Filter_LessThan_8Ux8U_1U_4_87_out1) 
          begin
            Filter_N_Mux_8_2_0_4_91_out1 = Filter_N_Mux_8_2_0_4_85_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_91_out1 = Filter_N_Mux_8_2_0_4_86_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_92
    assign Filter_LessThan_8Ux8U_1U_4_92_out1 = box_out1 < s_reg_32;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_32 or box_out1 or Filter_LessThan_8Ux8U_1U_4_92_out1)
      begin : Filter_N_Mux_8_2_0_4_93
        if (Filter_LessThan_8Ux8U_1U_4_92_out1) 
          begin
            Filter_N_Mux_8_2_0_4_93_out1 = box_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_93_out1 = s_reg_32;
          end
      end
    always @(s_reg_32 or box_out1 or Filter_LessThan_8Ux8U_1U_4_92_out1)
      begin : Filter_N_Mux_8_2_0_4_94
        if (Filter_LessThan_8Ux8U_1U_4_92_out1) 
          begin
            Filter_N_Mux_8_2_0_4_94_out1 = s_reg_32;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_94_out1 = box_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_95
    assign Filter_LessThan_8Ux8U_1U_4_95_out1 = Filter_N_Mux_8_2_0_4_93_out1 < s_reg_33[7:0];
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_96
    assign Filter_LessThan_8Ux8U_1U_4_96_out1 = Filter_N_Mux_8_2_0_4_94_out1 < s_reg_35;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_33[7:0] or Filter_N_Mux_8_2_0_4_93_out1 or Filter_LessThan_8Ux8U_1U_4_95_out1)
      begin : Filter_N_Mux_8_2_0_4_97
        if (Filter_LessThan_8Ux8U_1U_4_95_out1) 
          begin
            Filter_N_Mux_8_2_0_4_97_out1 = s_reg_33[7:0];
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_97_out1 = Filter_N_Mux_8_2_0_4_93_out1;
          end
      end
    always @(s_reg_35 or Filter_N_Mux_8_2_0_4_94_out1 or Filter_LessThan_8Ux8U_1U_4_96_out1)
      begin : Filter_N_Mux_8_2_0_4_98
        if (Filter_LessThan_8Ux8U_1U_4_96_out1) 
          begin
            Filter_N_Mux_8_2_0_4_98_out1 = Filter_N_Mux_8_2_0_4_94_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_98_out1 = s_reg_35;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_99
    assign Filter_LessThan_8Ux8U_1U_4_99_out1 = Filter_N_Mux_8_2_0_4_98_out1 < Filter_N_Mux_8_2_0_4_97_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_33[7:0] or Filter_N_Mux_8_2_0_4_93_out1 or Filter_LessThan_8Ux8U_1U_4_95_out1)
      begin : Filter_N_Mux_8_2_0_4_100
        if (Filter_LessThan_8Ux8U_1U_4_95_out1) 
          begin
            Filter_N_Mux_8_2_0_4_100_out1 = Filter_N_Mux_8_2_0_4_93_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_100_out1 = s_reg_33[7:0];
          end
      end
    always @(s_reg_35 or Filter_N_Mux_8_2_0_4_94_out1 or Filter_LessThan_8Ux8U_1U_4_96_out1)
      begin : Filter_N_Mux_8_2_0_4_101
        if (Filter_LessThan_8Ux8U_1U_4_96_out1) 
          begin
            Filter_N_Mux_8_2_0_4_101_out1 = s_reg_35;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_101_out1 = Filter_N_Mux_8_2_0_4_94_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_97_out1 or Filter_N_Mux_8_2_0_4_98_out1 or Filter_LessThan_8Ux8U_1U_4_99_out1)
      begin : Filter_N_Mux_8_2_0_4_102
        if (Filter_LessThan_8Ux8U_1U_4_99_out1) 
          begin
            Filter_N_Mux_8_2_0_4_102_out1 = Filter_N_Mux_8_2_0_4_98_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_102_out1 = Filter_N_Mux_8_2_0_4_97_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_97_out1 or Filter_N_Mux_8_2_0_4_98_out1 or Filter_LessThan_8Ux8U_1U_4_99_out1)
      begin : Filter_N_Mux_8_2_0_4_103
        if (Filter_LessThan_8Ux8U_1U_4_99_out1) 
          begin
            Filter_N_Mux_8_2_0_4_103_out1 = Filter_N_Mux_8_2_0_4_97_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_103_out1 = Filter_N_Mux_8_2_0_4_98_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_104
    assign Filter_LessThan_8Ux8U_1U_4_104_out1 = Filter_N_Mux_8_2_0_4_100_out1 < s_reg_31;
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_105
    assign Filter_LessThan_8Ux8U_1U_4_105_out1 = Filter_N_Mux_8_2_0_4_103_out1 < s_reg_42;
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_106
    assign Filter_LessThan_8Ux8U_1U_4_106_out1 = Filter_N_Mux_8_2_0_4_102_out1 < s_reg_41;
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_107
    assign Filter_LessThan_8Ux8U_1U_4_107_out1 = Filter_N_Mux_8_2_0_4_101_out1 < s_reg_24;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_31 or Filter_N_Mux_8_2_0_4_100_out1 or Filter_LessThan_8Ux8U_1U_4_104_out1)
      begin : Filter_N_Mux_8_2_0_4_109
        if (Filter_LessThan_8Ux8U_1U_4_104_out1) 
          begin
            Filter_N_Mux_8_2_0_4_109_out1 = s_reg_31;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_109_out1 = Filter_N_Mux_8_2_0_4_100_out1;
          end
      end
    always @(s_reg_42 or Filter_N_Mux_8_2_0_4_103_out1 or Filter_LessThan_8Ux8U_1U_4_105_out1)
      begin : Filter_N_Mux_8_2_0_4_110
        if (Filter_LessThan_8Ux8U_1U_4_105_out1) 
          begin
            Filter_N_Mux_8_2_0_4_110_out1 = Filter_N_Mux_8_2_0_4_103_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_110_out1 = s_reg_42;
          end
      end
    always @(s_reg_41 or Filter_N_Mux_8_2_0_4_102_out1 or Filter_LessThan_8Ux8U_1U_4_106_out1)
      begin : Filter_N_Mux_8_2_0_4_111
        if (Filter_LessThan_8Ux8U_1U_4_106_out1) 
          begin
            Filter_N_Mux_8_2_0_4_111_out1 = s_reg_41;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_111_out1 = Filter_N_Mux_8_2_0_4_102_out1;
          end
      end
    always @(s_reg_24 or Filter_N_Mux_8_2_0_4_101_out1 or Filter_LessThan_8Ux8U_1U_4_107_out1)
      begin : Filter_N_Mux_8_2_0_4_112
        if (Filter_LessThan_8Ux8U_1U_4_107_out1) 
          begin
            Filter_N_Mux_8_2_0_4_112_out1 = Filter_N_Mux_8_2_0_4_101_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_112_out1 = s_reg_24;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_114
    assign Filter_LessThan_8Ux8U_1U_4_114_out1 = Filter_N_Mux_8_2_0_4_110_out1 < Filter_N_Mux_8_2_0_4_109_out1;
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_115
    assign Filter_LessThan_8Ux8U_1U_4_115_out1 = Filter_N_Mux_8_2_0_4_112_out1 < Filter_N_Mux_8_2_0_4_111_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_31 or Filter_N_Mux_8_2_0_4_100_out1 or Filter_LessThan_8Ux8U_1U_4_104_out1)
      begin : Filter_N_Mux_8_2_0_4_116
        if (Filter_LessThan_8Ux8U_1U_4_104_out1) 
          begin
            Filter_N_Mux_8_2_0_4_116_out1 = Filter_N_Mux_8_2_0_4_100_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_116_out1 = s_reg_31;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_109_out1 or Filter_N_Mux_8_2_0_4_110_out1 or Filter_LessThan_8Ux8U_1U_4_114_out1)
      begin : Filter_N_Mux_8_2_0_4_117
        if (Filter_LessThan_8Ux8U_1U_4_114_out1) 
          begin
            Filter_N_Mux_8_2_0_4_117_out1 = Filter_N_Mux_8_2_0_4_109_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_117_out1 = Filter_N_Mux_8_2_0_4_110_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_111_out1 or Filter_N_Mux_8_2_0_4_112_out1 or Filter_LessThan_8Ux8U_1U_4_115_out1)
      begin : Filter_N_Mux_8_2_0_4_118
        if (Filter_LessThan_8Ux8U_1U_4_115_out1) 
          begin
            Filter_N_Mux_8_2_0_4_118_out1 = Filter_N_Mux_8_2_0_4_112_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_118_out1 = Filter_N_Mux_8_2_0_4_111_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_119
    assign Filter_LessThan_8Ux8U_1U_4_119_out1 = Filter_N_Mux_8_2_0_4_118_out1 < Filter_N_Mux_8_2_0_4_117_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(Filter_N_Mux_8_2_0_4_109_out1 or Filter_N_Mux_8_2_0_4_110_out1 or Filter_LessThan_8Ux8U_1U_4_114_out1)
      begin : Filter_N_Mux_8_2_0_4_120
        if (Filter_LessThan_8Ux8U_1U_4_114_out1) 
          begin
            Filter_N_Mux_8_2_0_4_120_out1 = Filter_N_Mux_8_2_0_4_110_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_120_out1 = Filter_N_Mux_8_2_0_4_109_out1;
          end
      end
    always @(s_reg_41 or Filter_N_Mux_8_2_0_4_102_out1 or Filter_LessThan_8Ux8U_1U_4_106_out1)
      begin : Filter_N_Mux_8_2_0_4_121
        if (Filter_LessThan_8Ux8U_1U_4_106_out1) 
          begin
            Filter_N_Mux_8_2_0_4_121_out1 = Filter_N_Mux_8_2_0_4_102_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_121_out1 = s_reg_41;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_117_out1 or Filter_N_Mux_8_2_0_4_118_out1 or Filter_LessThan_8Ux8U_1U_4_119_out1)
      begin : Filter_N_Mux_8_2_0_4_122
        if (Filter_LessThan_8Ux8U_1U_4_119_out1) 
          begin
            Filter_N_Mux_8_2_0_4_122_out1 = Filter_N_Mux_8_2_0_4_117_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_122_out1 = Filter_N_Mux_8_2_0_4_118_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_123
    assign Filter_LessThan_8Ux8U_1U_4_123_out1 = Filter_N_Mux_8_2_0_4_121_out1 < Filter_N_Mux_8_2_0_4_120_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(Filter_N_Mux_8_2_0_4_120_out1 or Filter_N_Mux_8_2_0_4_121_out1 or Filter_LessThan_8Ux8U_1U_4_123_out1)
      begin : Filter_N_Mux_8_2_0_4_124
        if (Filter_LessThan_8Ux8U_1U_4_123_out1) 
          begin
            Filter_N_Mux_8_2_0_4_124_out1 = Filter_N_Mux_8_2_0_4_120_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_124_out1 = Filter_N_Mux_8_2_0_4_121_out1;
          end
      end
    always @(s_reg_42 or Filter_N_Mux_8_2_0_4_103_out1 or Filter_LessThan_8Ux8U_1U_4_105_out1)
      begin : Filter_N_Mux_8_2_0_4_125
        if (Filter_LessThan_8Ux8U_1U_4_105_out1) 
          begin
            Filter_N_Mux_8_2_0_4_125_out1 = s_reg_42;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_125_out1 = Filter_N_Mux_8_2_0_4_103_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_111_out1 or Filter_N_Mux_8_2_0_4_112_out1 or Filter_LessThan_8Ux8U_1U_4_115_out1)
      begin : Filter_N_Mux_8_2_0_4_126
        if (Filter_LessThan_8Ux8U_1U_4_115_out1) 
          begin
            Filter_N_Mux_8_2_0_4_126_out1 = Filter_N_Mux_8_2_0_4_111_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_126_out1 = Filter_N_Mux_8_2_0_4_112_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_120_out1 or Filter_N_Mux_8_2_0_4_121_out1 or Filter_LessThan_8Ux8U_1U_4_123_out1)
      begin : Filter_N_Mux_8_2_0_4_127
        if (Filter_LessThan_8Ux8U_1U_4_123_out1) 
          begin
            Filter_N_Mux_8_2_0_4_127_out1 = Filter_N_Mux_8_2_0_4_121_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_127_out1 = Filter_N_Mux_8_2_0_4_120_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_128
    assign Filter_LessThan_8Ux8U_1U_4_128_out1 = Filter_N_Mux_8_2_0_4_126_out1 < Filter_N_Mux_8_2_0_4_125_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(Filter_N_Mux_8_2_0_4_117_out1 or Filter_N_Mux_8_2_0_4_118_out1 or Filter_LessThan_8Ux8U_1U_4_119_out1)
      begin : Filter_N_Mux_8_2_0_4_129
        if (Filter_LessThan_8Ux8U_1U_4_119_out1) 
          begin
            Filter_N_Mux_8_2_0_4_129_out1 = Filter_N_Mux_8_2_0_4_118_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_129_out1 = Filter_N_Mux_8_2_0_4_117_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_125_out1 or Filter_N_Mux_8_2_0_4_126_out1 or Filter_LessThan_8Ux8U_1U_4_128_out1)
      begin : Filter_N_Mux_8_2_0_4_130
        if (Filter_LessThan_8Ux8U_1U_4_128_out1) 
          begin
            Filter_N_Mux_8_2_0_4_130_out1 = Filter_N_Mux_8_2_0_4_126_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_130_out1 = Filter_N_Mux_8_2_0_4_125_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_131
    assign Filter_LessThan_8Ux8U_1U_4_131_out1 = Filter_N_Mux_8_2_0_4_129_out1 < Filter_N_Mux_8_2_0_4_130_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(Filter_N_Mux_8_2_0_4_129_out1 or Filter_N_Mux_8_2_0_4_130_out1 or Filter_LessThan_8Ux8U_1U_4_131_out1)
      begin : Filter_N_Mux_8_2_0_4_132
        if (Filter_LessThan_8Ux8U_1U_4_131_out1) 
          begin
            Filter_N_Mux_8_2_0_4_132_out1 = Filter_N_Mux_8_2_0_4_129_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_132_out1 = Filter_N_Mux_8_2_0_4_130_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_125_out1 or Filter_N_Mux_8_2_0_4_126_out1 or Filter_LessThan_8Ux8U_1U_4_128_out1)
      begin : Filter_N_Mux_8_2_0_4_133
        if (Filter_LessThan_8Ux8U_1U_4_128_out1) 
          begin
            Filter_N_Mux_8_2_0_4_133_out1 = Filter_N_Mux_8_2_0_4_125_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_133_out1 = Filter_N_Mux_8_2_0_4_126_out1;
          end
      end
    always @(Filter_N_Mux_8_2_0_4_129_out1 or Filter_N_Mux_8_2_0_4_130_out1 or Filter_LessThan_8Ux8U_1U_4_131_out1)
      begin : Filter_N_Mux_8_2_0_4_134
        if (Filter_LessThan_8Ux8U_1U_4_131_out1) 
          begin
            Filter_N_Mux_8_2_0_4_134_out1 = Filter_N_Mux_8_2_0_4_130_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_134_out1 = Filter_N_Mux_8_2_0_4_129_out1;
          end
      end
    always @(s_reg_24 or Filter_N_Mux_8_2_0_4_101_out1 or Filter_LessThan_8Ux8U_1U_4_107_out1)
      begin : Filter_N_Mux_8_2_0_4_135
        if (Filter_LessThan_8Ux8U_1U_4_107_out1) 
          begin
            Filter_N_Mux_8_2_0_4_135_out1 = s_reg_24;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_135_out1 = Filter_N_Mux_8_2_0_4_101_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_136
    assign Filter_LessThan_8Ux8U_1U_4_136_out1 = s_reg_32 < box_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_32 or box_out1 or Filter_LessThan_8Ux8U_1U_4_136_out1)
      begin : Filter_N_Mux_8_2_0_4_137
        if (Filter_LessThan_8Ux8U_1U_4_136_out1) 
          begin
            Filter_N_Mux_8_2_0_4_137_out1 = box_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_137_out1 = s_reg_32;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_138
    assign Filter_LessThan_8Ux8U_1U_4_138_out1 = s_reg_35 < Filter_N_Mux_8_2_0_4_137_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_35 or Filter_N_Mux_8_2_0_4_137_out1 or Filter_LessThan_8Ux8U_1U_4_138_out1)
      begin : Filter_N_Mux_8_2_0_4_139
        if (Filter_LessThan_8Ux8U_1U_4_138_out1) 
          begin
            Filter_N_Mux_8_2_0_4_139_out1 = s_reg_35;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_139_out1 = Filter_N_Mux_8_2_0_4_137_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_140
    assign Filter_LessThan_8Ux8U_1U_4_140_out1 = s_reg_24 < Filter_N_Mux_8_2_0_4_139_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_24 or Filter_N_Mux_8_2_0_4_139_out1 or Filter_LessThan_8Ux8U_1U_4_140_out1)
      begin : Filter_N_Mux_8_2_0_4_141
        if (Filter_LessThan_8Ux8U_1U_4_140_out1) 
          begin
            Filter_N_Mux_8_2_0_4_141_out1 = s_reg_24;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_141_out1 = Filter_N_Mux_8_2_0_4_139_out1;
          end
      end
    always @(s_reg_32 or box_out1 or Filter_LessThan_8Ux8U_1U_4_136_out1)
      begin : Filter_N_Mux_8_2_0_4_143
        if (Filter_LessThan_8Ux8U_1U_4_136_out1) 
          begin
            Filter_N_Mux_8_2_0_4_143_out1 = s_reg_32;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_143_out1 = box_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_144
    assign Filter_LessThan_8Ux8U_1U_4_144_out1 = s_reg_41 < Filter_N_Mux_8_2_0_4_141_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_41 or Filter_N_Mux_8_2_0_4_141_out1 or Filter_LessThan_8Ux8U_1U_4_144_out1)
      begin : Filter_N_Mux_8_2_0_4_145
        if (Filter_LessThan_8Ux8U_1U_4_144_out1) 
          begin
            Filter_N_Mux_8_2_0_4_145_out1 = s_reg_41;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_145_out1 = Filter_N_Mux_8_2_0_4_141_out1;
          end
      end
    always @(s_reg_24 or Filter_N_Mux_8_2_0_4_139_out1 or Filter_LessThan_8Ux8U_1U_4_140_out1)
      begin : Filter_N_Mux_8_2_0_4_146
        if (Filter_LessThan_8Ux8U_1U_4_140_out1) 
          begin
            Filter_N_Mux_8_2_0_4_146_out1 = Filter_N_Mux_8_2_0_4_139_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_146_out1 = s_reg_24;
          end
      end
    always @(s_reg_41 or Filter_N_Mux_8_2_0_4_141_out1 or Filter_LessThan_8Ux8U_1U_4_144_out1)
      begin : Filter_N_Mux_8_2_0_4_147
        if (Filter_LessThan_8Ux8U_1U_4_144_out1) 
          begin
            Filter_N_Mux_8_2_0_4_147_out1 = Filter_N_Mux_8_2_0_4_141_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_147_out1 = s_reg_41;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_148
    assign Filter_LessThan_8Ux8U_1U_4_148_out1 = s_reg_42 < Filter_N_Mux_8_2_0_4_146_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_35 or Filter_N_Mux_8_2_0_4_137_out1 or Filter_LessThan_8Ux8U_1U_4_138_out1)
      begin : Filter_N_Mux_8_2_0_4_149
        if (Filter_LessThan_8Ux8U_1U_4_138_out1) 
          begin
            Filter_N_Mux_8_2_0_4_149_out1 = Filter_N_Mux_8_2_0_4_137_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_149_out1 = s_reg_35;
          end
      end
    always @(s_reg_42 or Filter_N_Mux_8_2_0_4_146_out1 or Filter_LessThan_8Ux8U_1U_4_148_out1)
      begin : Filter_N_Mux_8_2_0_4_150
        if (Filter_LessThan_8Ux8U_1U_4_148_out1) 
          begin
            Filter_N_Mux_8_2_0_4_150_out1 = s_reg_42;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_150_out1 = Filter_N_Mux_8_2_0_4_146_out1;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_151
    assign Filter_LessThan_8Ux8U_1U_4_151_out1 = s_reg_31 < Filter_N_Mux_8_2_0_4_149_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_31 or Filter_N_Mux_8_2_0_4_149_out1 or Filter_LessThan_8Ux8U_1U_4_151_out1)
      begin : Filter_N_Mux_8_2_0_4_152
        if (Filter_LessThan_8Ux8U_1U_4_151_out1) 
          begin
            Filter_N_Mux_8_2_0_4_152_out1 = s_reg_31;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_152_out1 = Filter_N_Mux_8_2_0_4_149_out1;
          end
      end
    always @(s_reg_42 or Filter_N_Mux_8_2_0_4_146_out1 or Filter_LessThan_8Ux8U_1U_4_148_out1)
      begin : Filter_N_Mux_8_2_0_4_153
        if (Filter_LessThan_8Ux8U_1U_4_148_out1) 
          begin
            Filter_N_Mux_8_2_0_4_153_out1 = Filter_N_Mux_8_2_0_4_146_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_153_out1 = s_reg_42;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_154
    assign Filter_LessThan_8Ux8U_1U_4_154_out1 = s_reg_49 < Filter_N_Mux_8_2_0_4_152_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_49 or Filter_N_Mux_8_2_0_4_152_out1 or Filter_LessThan_8Ux8U_1U_4_154_out1)
      begin : Filter_N_Mux_8_2_0_4_155
        if (Filter_LessThan_8Ux8U_1U_4_154_out1) 
          begin
            Filter_N_Mux_8_2_0_4_155_out1 = s_reg_49;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_155_out1 = Filter_N_Mux_8_2_0_4_152_out1;
          end
      end
    always @(s_reg_31 or Filter_N_Mux_8_2_0_4_149_out1 or Filter_LessThan_8Ux8U_1U_4_151_out1)
      begin : Filter_N_Mux_8_2_0_4_156
        if (Filter_LessThan_8Ux8U_1U_4_151_out1) 
          begin
            Filter_N_Mux_8_2_0_4_156_out1 = Filter_N_Mux_8_2_0_4_149_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_156_out1 = s_reg_31;
          end
      end
    always @(s_reg_49 or Filter_N_Mux_8_2_0_4_152_out1 or Filter_LessThan_8Ux8U_1U_4_154_out1)
      begin : Filter_N_Mux_8_2_0_4_157
        if (Filter_LessThan_8Ux8U_1U_4_154_out1) 
          begin
            Filter_N_Mux_8_2_0_4_157_out1 = Filter_N_Mux_8_2_0_4_152_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_157_out1 = s_reg_49;
          end
      end
    
    // resource: Filter_LessThan_8Ux8U_1U_4  instance: Filter_LessThan_8Ux8U_1U_4_158
    assign Filter_LessThan_8Ux8U_1U_4_158_out1 = s_reg_50 < Filter_N_Mux_8_2_0_4_156_out1;
    
    // resource: Filter_N_Mux_8_2_0_4
    always @(s_reg_50 or Filter_N_Mux_8_2_0_4_156_out1 or Filter_LessThan_8Ux8U_1U_4_158_out1)
      begin : Filter_N_Mux_8_2_0_4_159
        if (Filter_LessThan_8Ux8U_1U_4_158_out1) 
          begin
            Filter_N_Mux_8_2_0_4_159_out1 = s_reg_50;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_159_out1 = Filter_N_Mux_8_2_0_4_156_out1;
          end
      end
    always @(s_reg_50 or Filter_N_Mux_8_2_0_4_156_out1 or Filter_LessThan_8Ux8U_1U_4_158_out1)
      begin : Filter_N_Mux_8_2_0_4_160
        if (Filter_LessThan_8Ux8U_1U_4_158_out1) 
          begin
            Filter_N_Mux_8_2_0_4_160_out1 = Filter_N_Mux_8_2_0_4_156_out1;
          end 
        else 
          begin
            Filter_N_Mux_8_2_0_4_160_out1 = s_reg_50;
          end
      end
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_175
    assign Filter_Add_2Ux1U_2U_4_175_out1 = s_reg_8 + 2'd1;
    
    // resource: Filter_LessThan_2Ux2U_1U_4  instance: Filter_LessThan_2Ux2U_1U_4_178
    assign Filter_LessThan_2Ux2U_1U_4_178_out1 = s_reg_8 < 2'd3;
    
    // resource: mux_4bx2i1c
    always @(s_reg_17[3:0] or gs_ctrl_do_filter_h200000000000)
      begin : drive_Filter_Equal_4Ux3U_1U_4_182_in2
        if (gs_ctrl_do_filter_h200000000000) 
          begin
            Filter_Equal_4Ux3U_1U_4_182_in2 = s_reg_17[3:0];
          end 
        else 
          begin
            Filter_Equal_4Ux3U_1U_4_182_in2 = 4'd00;
          end
      end
    
    // resource: Filter_Equal_4Ux3U_1U_4  instance: Filter_Equal_4Ux3U_1U_4_182
    assign Filter_Equal_4Ux3U_1U_4_182_out1 = Filter_Equal_4Ux3U_1U_4_182_in2 == 4'd04;
    
    // resource: Filter_NotEQ_4Ux3U_1U_4  instance: Filter_NotEQ_4Ux3U_1U_4_183
    assign Filter_NotEQ_4Ux3U_1U_4_183_out1 = Filter_Equal_4Ux3U_1U_4_182_in2 != 4'd04;
    
    // resource: Filter_Equal_4Ux3U_1U_4  instance: Filter_Equal_4Ux3U_1U_4_185
    assign Filter_Equal_4Ux3U_1U_4_185_out1 = s_reg_17[3:0] == 4'd04;
    
    // resource: Filter_Add_5Ux1U_5U_4  instance: Filter_Add_5Ux1U_5U_4_186
    assign Filter_Add_5Ux1U_5U_4_186_out1 = {1'b0, s_reg_17[3:0]} + 5'd01;
    
    // instance: drive_Filter_N_Mux_9_2_1_4_187_in2
    assign Filter_N_Mux_9_2_1_4_187_in2 = {box_out1, 1'b0};
    
    // resource: Filter_N_Mux_9_2_1_4
    always @(box_out1 or Filter_Equal_4Ux3U_1U_4_185_out1 or Filter_N_Mux_9_2_1_4_187_in2)
      begin : Filter_N_Mux_9_2_1_4_187
        if (Filter_Equal_4Ux3U_1U_4_185_out1) 
          begin
            Filter_N_Mux_9_2_1_4_187_out1 = Filter_N_Mux_9_2_1_4_187_in2;
          end 
        else 
          begin
            Filter_N_Mux_9_2_1_4_187_out1 = {1'b0, box_out1};
          end
      end
    
    // resource: Filter_LessThan_4Ux4U_1U_4  instance: Filter_LessThan_4Ux4U_1U_4_188
    assign Filter_LessThan_4Ux4U_1U_4_188_out1 = s_reg_17[3:0] < 4'd09;
    
    // resource: Filter_Add_32Ux9U_32U_1  instance: Filter_Add_32Ux9U_32U_1_189
    assign Filter_Add_32Ux9U_32U_1_189_out1 = s_reg_64 + {23'b00000000000000000000000, s_reg_33};
    
    // resource: Filter_Sub_32Ux8U_32S_1  instance: Filter_Sub_32Ux8U_32S_1_190
    assign Filter_Sub_32Ux8U_32S_1_190_out1 = Filter_Add_32Ux9U_32U_1_189_out1 - {24'b000000000000000000000000, s_reg_32};
    
    // resource: Filter_Add_2Ux1U_2U_4  instance: Filter_Add_2Ux1U_2U_4_191
    assign Filter_Add_2Ux1U_2U_4_191_out1 = s_reg_8 + 2'd1;
    
    // instance: drive_Filter_Div_31Ux3U_31U_4_192_in2
    assign Filter_Div_31Ux3U_31U_4_192_in2 = Filter_Sub_32Ux8U_32S_1_190_out1[31:1];
    
    // instance: drive_Filter_Div_31Ux3U_31U_4_192_in1
    assign Filter_Div_31Ux3U_31U_4_192_in1 = 3'd5;
    
    // resource: Filter_LessThan_2Ux2U_1U_4  instance: Filter_LessThan_2Ux2U_1U_4_193
    assign Filter_LessThan_2Ux2U_1U_4_193_out1 = s_reg_8 < 2'd3;
    
    // resource: regr_en_sc_6
    always @(posedge i_clk)
      begin : drive_global_state
        if (i_rst == 1'b0) 
          begin
            global_state <= 6'd00;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  global_state <= global_state_next;
                end
            endcase
          end
      end
    
    // resource: mux_6bx10i9c
    always @(s_reg_12 or Filter_Add_2Ux1U_2U_4_22_out1 or Filter_LessThan_2Ux2U_1U_4_26_out1 or Filter_Add_2Ux1U_2U_4_32_out1 or Filter_LessThan_2Ux2U_1U_4_33_out1 or Filter_LessThan_2Ux2U_1U_4_34_out1 or Filter_Add_2Ux1U_2U_4_58_out1 or Filter_LessThan_2Ux2U_1U_4_178_out1 or Filter_LessThan_4Ux4U_1U_4_188_out1 or Filter_LessThan_2Ux2U_1U_4_193_out1 or global_state)
      begin : drive_global_state_next
        case (global_state) 
          6'd00, 6'd52: 
            begin
              global_state_next = 6'd01;
            end
          6'd05: 
            begin
              if (s_reg_12) 
                begin
                  global_state_next = 6'd10;
                end 
              else 
                begin
                  global_state_next = global_state + 6'd01;
                end
            end
          6'd09: 
            begin
              case (Filter_Add_2Ux1U_2U_4_32_out1) 
                2'd3: 
                  begin
                    if (Filter_LessThan_2Ux2U_1U_4_33_out1) 
                      begin
                        global_state_next = 6'd06;
                      end 
                    else 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_34_out1) 
                          begin
                            global_state_next = 6'd01;
                          end 
                        else 
                          begin
                            global_state_next = 6'd12;
                          end
                      end
                  end
                default: 
                  begin
                    global_state_next = 6'd06;
                  end
              endcase
            end
          6'd11: 
            begin
              case (Filter_Add_2Ux1U_2U_4_22_out1) 
                2'd3: 
                  begin
                    if (Filter_LessThan_2Ux2U_1U_4_26_out1) 
                      begin
                        global_state_next = 6'd02;
                      end 
                    else 
                      begin
                        if (Filter_LessThan_2Ux2U_1U_4_34_out1) 
                          begin
                            global_state_next = 6'd01;
                          end 
                        else 
                          begin
                            global_state_next = global_state + 6'd01;
                          end
                      end
                  end
                default: 
                  begin
                    global_state_next = 6'd10;
                  end
              endcase
            end
          6'd23: 
            begin
              case (Filter_Add_2Ux1U_2U_4_58_out1) 
                2'd3: 
                  begin
                    global_state_next = global_state + 6'd01;
                  end
                default: 
                  begin
                    global_state_next = 6'd12;
                  end
              endcase
            end
          6'd41: 
            begin
              if (Filter_LessThan_2Ux2U_1U_4_178_out1) 
                begin
                  global_state_next = 6'd24;
                end 
              else 
                begin
                  global_state_next = global_state + 6'd01;
                end
            end
          6'd42, 6'd45: 
            begin
              global_state_next = 6'd43;
            end
          6'd44: 
            begin
              if (Filter_LessThan_4Ux4U_1U_4_188_out1) 
                begin
                  global_state_next = global_state + 6'd01;
                end 
              else 
                begin
                  global_state_next = 6'd46;
                end
            end
          6'd47: 
            begin
              if (Filter_LessThan_2Ux2U_1U_4_193_out1) 
                begin
                  global_state_next = 6'd42;
                end 
              else 
                begin
                  global_state_next = global_state + 6'd01;
                end
            end
          default: 
            begin
              global_state_next = global_state + 6'd01;
            end
        endcase
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_ha44
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_ha44 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd02, 6'd06: 
                      begin
                        gs_ctrl_do_filter_ha44 <= 2'd1;
                      end
                    6'd09, 6'd11: 
                      begin
                        gs_ctrl_do_filter_ha44 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_ha44 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx6i6c
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h3c00000000a00
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h3c00000000a00 <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd09, 6'd11: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd1;
                      end
                    6'd46: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd2;
                      end
                    6'd47: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd3;
                      end
                    6'd48: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd4;
                      end
                    6'd49: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd5;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h3c00000000a00 <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h400000000000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h400000000000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd46: 
                      begin
                        gs_ctrl_do_filter_h400000000000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h400000000000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx5i5c
    // resource: regr_en_ss_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h13c20000000a01
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h13c20000000a01 <= 3'd1;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd00, 6'd46, 6'd47, 6'd48, 6'd49, 6'd52: 
                      begin
                        gs_ctrl_do_filter_h13c20000000a01 <= 3'd1;
                      end
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_h13c20000000a01 <= 3'd2;
                      end
                    6'd11: 
                      begin
                        gs_ctrl_do_filter_h13c20000000a01 <= 3'd3;
                      end
                    6'd41: 
                      begin
                        gs_ctrl_do_filter_h13c20000000a01 <= 3'd4;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h13c20000000a01 <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_en_ss_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h10400000000a01
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h10400000000a01 <= 2'd1;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd00, 6'd46, 6'd52: 
                      begin
                        gs_ctrl_do_filter_h10400000000a01 <= 2'd1;
                      end
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_h10400000000a01 <= 2'd2;
                      end
                    6'd11: 
                      begin
                        gs_ctrl_do_filter_h10400000000a01 <= 2'd3;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h10400000000a01 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx5i5c
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_ha18
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_ha18 <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd03: 
                      begin
                        gs_ctrl_do_filter_ha18 <= 3'd1;
                      end
                    6'd04: 
                      begin
                        gs_ctrl_do_filter_ha18 <= 3'd2;
                      end
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_ha18 <= 3'd3;
                      end
                    6'd11: 
                      begin
                        gs_ctrl_do_filter_ha18 <= 3'd4;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_ha18 <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h18
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h18 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd03: 
                      begin
                        gs_ctrl_do_filter_h18 <= 2'd1;
                      end
                    6'd04: 
                      begin
                        gs_ctrl_do_filter_h18 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h18 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx5i5c
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_ha3c
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_ha3c <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd02, 6'd03, 6'd04: 
                      begin
                        gs_ctrl_do_filter_ha3c <= 3'd1;
                      end
                    6'd05: 
                      begin
                        gs_ctrl_do_filter_ha3c <= 3'd2;
                      end
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_ha3c <= 3'd3;
                      end
                    6'd11: 
                      begin
                        gs_ctrl_do_filter_ha3c <= 3'd4;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_ha3c <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h1c
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h1c <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd02, 6'd03, 6'd04: 
                      begin
                        gs_ctrl_do_filter_h1c <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h1c <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h200
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h200 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_h200 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h200 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h7e0080
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h7e0080 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd07, 6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd22: 
                      begin
                        gs_ctrl_do_filter_h7e0080 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h7e0080 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx6i6c
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_ha7fffffffb80
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_ha7fffffffb80 <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd07, 6'd08, 6'd12, 6'd13, 6'd14, 6'd15, 6'd16, 6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd22, 6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32, 6'd33, 6'd34, 6'd35, 6'd36, 6'd37, 6'd38, 6'd39, 6'd40, 6'd42, 6'd45, 6'd47: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd1;
                      end
                    6'd09: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd2;
                      end
                    6'd11: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd3;
                      end
                    6'd23: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd4;
                      end
                    6'd41: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd5;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_ha7fffffffb80 <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_4bx10i10c
    // resource: regr_en_sc_4
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h27ffffbf0500
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h27ffffbf0500 <= 4'd00;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd08, 6'd23, 6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd31, 6'd33, 6'd34, 6'd35, 6'd36, 6'd37, 6'd38, 6'd39, 6'd40, 6'd41, 6'd42: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd01;
                      end
                    6'd10: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd02;
                      end
                    6'd16, 6'd21: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd03;
                      end
                    6'd17: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd04;
                      end
                    6'd18: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd05;
                      end
                    6'd19: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd06;
                      end
                    6'd20: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd07;
                      end
                    6'd30, 6'd32: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd08;
                      end
                    6'd45: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd09;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0500 <= 4'd00;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_4bx11i11c
    // resource: regr_en_sc_4
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h1ff00000100
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h1ff00000100 <= 4'd00;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd08: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd01;
                      end
                    6'd32: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd02;
                      end
                    6'd33: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd03;
                      end
                    6'd34: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd04;
                      end
                    6'd35: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd05;
                      end
                    6'd36: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd06;
                      end
                    6'd37: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd07;
                      end
                    6'd38: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd08;
                      end
                    6'd39: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd09;
                      end
                    6'd40: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd10;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h1ff00000100 <= 4'd00;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h27ffffbf0540
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h27ffffbf0540 <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd06: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd1;
                      end
                    6'd08: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd2;
                      end
                    6'd10, 6'd16, 6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32, 6'd33, 6'd34, 6'd35, 6'd36, 6'd37, 6'd38, 6'd39, 6'd40: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd3;
                      end
                    6'd23: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd4;
                      end
                    6'd41: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd5;
                      end
                    6'd42: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd6;
                      end
                    6'd45: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd7;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h27ffffbf0540 <= 3'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h1ff00000540
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h1ff00000540 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd06: 
                      begin
                        gs_ctrl_do_filter_h1ff00000540 <= 2'd1;
                      end
                    6'd08: 
                      begin
                        gs_ctrl_do_filter_h1ff00000540 <= 2'd2;
                      end
                    6'd10, 6'd32, 6'd33, 6'd34, 6'd35, 6'd36, 6'd37, 6'd38, 6'd39, 6'd40: 
                      begin
                        gs_ctrl_do_filter_h1ff00000540 <= 2'd3;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h1ff00000540 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_4bx12i12c
    // resource: regr_en_sc_4
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h87febffdfb00
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h87febffdfb00 <= 4'd00;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd08: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd01;
                      end
                    6'd09, 6'd11, 6'd18, 6'd24, 6'd33: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd02;
                      end
                    6'd12, 6'd19, 6'd25, 6'd34: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd03;
                      end
                    6'd13, 6'd21, 6'd36, 6'd41, 6'd47: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd04;
                      end
                    6'd14, 6'd22, 6'd27, 6'd37: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd05;
                      end
                    6'd15, 6'd29, 6'd39: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd06;
                      end
                    6'd16, 6'd31, 6'd40: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd07;
                      end
                    6'd20, 6'd26, 6'd35: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd08;
                      end
                    6'd23: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd09;
                      end
                    6'd28, 6'd38: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd10;
                      end
                    6'd42: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd11;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h87febffdfb00 <= 4'd00;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h20000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h20000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd17: 
                      begin
                        gs_ctrl_do_filter_h20000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h20000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h7e00800
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h7e00800 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd07: 
                      begin
                        gs_ctrl_do_filter_h7e00800 <= 2'd1;
                      end
                    6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd22: 
                      begin
                        gs_ctrl_do_filter_h7e00800 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h7e00800 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h7e0000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h7e0000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd17, 6'd18, 6'd19, 6'd20, 6'd21, 6'd22: 
                      begin
                        gs_ctrl_do_filter_h7e0000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h7e0000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h20000000000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h20000000000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd41: 
                      begin
                        gs_ctrl_do_filter_h20000000000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h20000000000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h820001000000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h820001000000 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd24: 
                      begin
                        gs_ctrl_do_filter_h820001000000 <= 2'd1;
                      end
                    6'd41: 
                      begin
                        gs_ctrl_do_filter_h820001000000 <= 2'd2;
                      end
                    6'd47: 
                      begin
                        gs_ctrl_do_filter_h820001000000 <= 2'd3;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h820001000000 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h1000000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h1000000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd24: 
                      begin
                        gs_ctrl_do_filter_h1000000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h1000000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h200000000000
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h200000000000 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    6'd45: 
                      begin
                        gs_ctrl_do_filter_h200000000000 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h200000000000 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // instance: drive_i_rgb_busy
    assign i_rgb_busy = Filter_gen_busy_r_4_196_out1[2];
    
    // resource: Filter_gen_busy_r_4  instance: Filter_gen_busy_r_4_196 (4 concurrent statements)
      assign Filter_gen_busy_r_4_196_out1 = {Filter_gen_busy_r_4_196_gnew_req, {Filter_gen_busy_r_4_196_gdiv, Filter_gen_busy_r_4_196_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next}};
      assign Filter_gen_busy_r_4_196_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next = ~Filter_gen_busy_r_4_196_gdiv;
      assign Filter_gen_busy_r_4_196_gdiv = i_rgb_vld & !Filter_gen_busy_r_4_196_gnew_req;
      assign Filter_gen_busy_r_4_196_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);
    // (end of Filter_gen_busy_r_4_196)
    
    // resource: regr_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_unvalidated_req
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_unvalidated_req <= 1'd1;
          end 
        else 
          begin
            i_rgb_m_unvalidated_req <= Filter_N_Muxb_1_2_2_4_4_out1;
          end
      end
    
    // resource: Filter_N_Muxb_1_2_2_4
    always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
      begin : Filter_N_Muxb_1_2_2_4_4
        if (i_rgb_m_busy_req_0) 
          begin
            Filter_N_Muxb_1_2_2_4_4_out1 = i_rgb_m_unvalidated_req;
          end 
        else 
          begin
            Filter_N_Muxb_1_2_2_4_4_out1 = i_rgb_vld;
          end
      end
    
    // instance: drive_o_result_vld
    assign o_result_vld = Filter_Or_1Ux1U_1U_4_2_out1;
    
    // resource: Filter_Or_1Ux1U_1U_4  instance: Filter_Or_1Ux1U_1U_4_2
    assign Filter_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | Filter_Xor_1Ux1U_1U_1_1_out1;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_result_m_unacked_req
        if (i_rst == 1'b0) 
          begin
            o_result_m_unacked_req <= 1'd0;
          end 
        else 
          begin
            o_result_m_unacked_req <= Filter_And_1Ux1U_1U_4_194_out1;
          end
      end
    
    // resource: Filter_And_1Ux1U_1U_4  instance: Filter_And_1Ux1U_1U_4_194
    assign Filter_And_1Ux1U_1U_4_194_out1 = o_result_busy & o_result_vld;
    
    // resource: Filter_Xor_1Ux1U_1U_1  instance: Filter_Xor_1Ux1U_1U_1_1
    assign Filter_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_result_m_req_m_prev_trig_req
        if (i_rst == 1'b0) 
          begin
            o_result_m_req_m_prev_trig_req <= 1'd0;
          end 
        else 
          begin
            o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
          end
      end
    
    // resource: Filter_Not_1U_1U_1  instance: Filter_Not_1U_1U_1_3
    assign Filter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

endmodule

